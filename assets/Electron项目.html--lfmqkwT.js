import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-CEy8En57.js";const e={},p=t(`<h1 id="electron-项目" tabindex="-1"><a class="header-anchor" href="#electron-项目"><span>Electron 项目</span></a></h1><h2 id="基于-electron-和-vue3-的桌面端应用开发" tabindex="-1"><a class="header-anchor" href="#基于-electron-和-vue3-的桌面端应用开发"><span>基于 Electron 和 Vue3 的桌面端应用开发</span></a></h2><blockquote><p>1.2 官网网址:<a href="https://evite.netlify.app/" target="_blank" rel="noopener noreferrer">https://evite.netlify.app/</a></p><p>1.3 安装步骤 npx degit alex8088/electron-vite-boilerplate electron-appcd electron-app</p></blockquote><blockquote><p>npm install</p><p>npm run dev</p></blockquote><ul><li>vue 版本:vue3</li><li>构建工具:vite</li><li>框架类型:Electron</li><li>JS 语法:TypeScript</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>用户名和密码
admin
abc123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由二次封装" tabindex="-1"><a class="header-anchor" href="#路由二次封装"><span>路由二次封装</span></a></h3><blockquote><p>疑问:为什么路由二次封装?</p><p>解答:router 文件中在写项目中包含:路由表、导航守卫等等内容，假设路由表特别多 或 导航守卫内容特别多</p><p>代码则很难维护和阅读，所以二次封装路由是为了方便后期维护和管理。</p></blockquote><h3 id="pinia-和持久化存储" tabindex="-1"><a class="header-anchor" href="#pinia-和持久化存储"><span>pinia 和持久化存储</span></a></h3><p><strong>下载安装</strong></p><div class="language-node line-numbers-mode" data-ext="node" data-title="node"><pre class="language-node"><code>pnpm i vue-router -S
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>main.ts 引入</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>index.ts</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> usestore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&quot;storeId&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      counter<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  actions<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.4 Vuex 术 IPinia 的 x 别</strong></p><blockquote><p>Vuex 和 pinia 的区别有很多，例如:pinia 没有 mutations 和 modules，那么 vuex 的 modules 是为了区分和管理</p><p>小 store 模块的内容，但是 pinia 没有 modules 所以无法直接管理，但是为了项目可能 store 比较多，为了更好</p><p>的管理 store 可以模拟实现来完成。</p></blockquote><p><strong>拆分 store</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// useUserStore</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> useUserStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  actions<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useUserStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./useUserStore&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> usestore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&quot;storeId&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      user<span class="token operator">:</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 用户</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>持久化存储</strong></p><div class="language-node line-numbers-mode" data-ext="node" data-title="node"><pre class="language-node"><code>pnpm install pinia-plugin-persist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>main.ts</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 引入pinia且持久化存储</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> piniaPluginPersist <span class="token keyword">from</span> <span class="token string">&quot;pinia-plugin-persist&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
store<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>piniaPluginPersist<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>useUserStore</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>persist<span class="token operator">:</span> <span class="token punctuation">{</span>
    enabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开始数据缓存</span>
        strategies<span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                storage<span class="token operator">:</span> localStorage <span class="token comment">// 缓存位置,默认走session</span>
                <span class="token comment">// paths: [&#39;name&#39;] // 需要缓存的属性</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路径别名" tabindex="-1"><a class="header-anchor" href="#路径别名"><span>路径别名</span></a></h3><p>配置文件：electron.vite.config.ts</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token string-property property">&#39;@renderer&#39;</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src/renderer/src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string-property property">&#39;@store&#39;</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src/renderer/src/store&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string-property property">&#39;@views&#39;</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src/renderer/src/views&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string-property property">&#39;@router&#39;</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src/renderer/src/router&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string-property property">&#39;@components&#39;</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src/renderer/src/components&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string-property property">&#39;@utils&#39;</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src/renderer/src/utils&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string-property property">&#39;@api&#39;</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src/renderer/src/api&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="渲染进程向主进程通信" tabindex="-1"><a class="header-anchor" href="#渲染进程向主进程通信"><span><strong>渲染进程向主进程通信</strong></span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>渲染进程<span class="token operator">:</span>
electron<span class="token punctuation">.</span>ipcRenderer<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;名称&#39;</span><span class="token punctuation">)</span>
主进程<span class="token operator">:</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span>shell<span class="token punctuation">,</span>BrowserWindow<span class="token punctuation">,</span>ipcMain <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;electron&#39;</span>
ipcMain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token string">&#39;名称&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span>渲染进程向主进程传递的参数<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),o=[p];function i(c,l){return a(),s("div",null,o)}const d=n(e,[["render",i],["__file","Electron项目.html.vue"]]),k=JSON.parse('{"path":"/Electron/Electron%E9%A1%B9%E7%9B%AE.html","title":"Electron 项目","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2023-02-10T00:00:00.000Z","category":["客户端"],"tag":["Electron","Vue3","TypeScript","Vite"],"star":true,"description":"Electron 项目 基于 Electron 和 Vue3 的桌面端应用开发 1.2 官网网址:https://evite.netlify.app/ 1.3 安装步骤 npx degit alex8088/electron-vite-boilerplate electron-appcd electron-app npm install npm run...","head":[["meta",{"property":"og:url","content":"https://studentdj.github.io/my-blob/Electron/Electron%E9%A1%B9%E7%9B%AE.html"}],["meta",{"property":"og:site_name","content":"月岛"}],["meta",{"property":"og:title","content":"Electron 项目"}],["meta",{"property":"og:description","content":"Electron 项目 基于 Electron 和 Vue3 的桌面端应用开发 1.2 官网网址:https://evite.netlify.app/ 1.3 安装步骤 npx degit alex8088/electron-vite-boilerplate electron-appcd electron-app npm install npm run..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-24T08:40:26.000Z"}],["meta",{"property":"article:author","content":"月岛"}],["meta",{"property":"article:tag","content":"Electron"}],["meta",{"property":"article:tag","content":"Vue3"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:tag","content":"Vite"}],["meta",{"property":"article:published_time","content":"2023-02-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-24T08:40:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Electron 项目\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-24T08:40:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"月岛\\",\\"url\\":\\"https://studentdj.github.io/my-blob/\\"}]}"]]},"headers":[{"level":2,"title":"基于 Electron 和 Vue3 的桌面端应用开发","slug":"基于-electron-和-vue3-的桌面端应用开发","link":"#基于-electron-和-vue3-的桌面端应用开发","children":[{"level":3,"title":"路由二次封装","slug":"路由二次封装","link":"#路由二次封装","children":[]},{"level":3,"title":"pinia 和持久化存储","slug":"pinia-和持久化存储","link":"#pinia-和持久化存储","children":[]},{"level":3,"title":"路径别名","slug":"路径别名","link":"#路径别名","children":[]},{"level":3,"title":"渲染进程向主进程通信","slug":"渲染进程向主进程通信","link":"#渲染进程向主进程通信","children":[]}]}],"git":{"createdTime":1716540026000,"updatedTime":1716540026000,"contributors":[{"name":"DJ","email":"2412205377@qq.com","commits":1}]},"readingTime":{"minutes":1.65,"words":496},"filePathRelative":"Electron/Electron项目.md","localizedDate":"2023年2月10日","excerpt":"\\n<h2>基于 Electron 和 Vue3 的桌面端应用开发</h2>\\n<blockquote>\\n<p>1.2 官网网址:<a href=\\"https://evite.netlify.app/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://evite.netlify.app/</a></p>\\n<p>1.3 安装步骤 npx degit alex8088/electron-vite-boilerplate electron-appcd electron-app</p>\\n</blockquote>\\n<blockquote>\\n<p>npm install</p>\\n<p>npm run dev</p>\\n</blockquote>","autoDesc":true}');export{d as comp,k as data};
