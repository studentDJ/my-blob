import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as e,e as i}from"./app-BzB8D37R.js";const n="/my-blob/assets/Maven%E7%9A%84%E4%BD%9C%E7%94%A8-b3JoCL9K.png",l="/my-blob/assets/%E5%AE%89%E8%A3%85-fTQQe8Xt.png",o="/my-blob/assets/Maven%E5%9D%90%E6%A0%87-CSGtZh_N.png",r="/my-blob/assets/%E4%BE%9D%E8%B5%96%E9%85%8D%E7%BD%AE-BluNfCH3.png",s="/my-blob/assets/%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92-DQavtyMa.png",d="/my-blob/assets/%E6%8E%92%E9%99%A4%E4%BE%9D%E8%B5%96-P3m2ADio.png",c="/my-blob/assets/%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4-9vFGZSrc.png",p="/my-blob/assets/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-Bs1ln2QW.png",g="/my-blob/assets/%E5%93%8D%E5%BA%94%E6%A0%BC%E5%BC%8F-C5-GHHOU.png",h="/my-blob/assets/Tomcat-aGOt5Fa3.png",b="/my-blob/assets/springbootweb-%E7%A8%8B%E5%BA%8F%E8%A7%A3%E6%9E%90-4TAn-TAv.png",u="/my-blob/assets/%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94-Cs8wEw1E.png",m="/my-blob/assets/ApiPost-CNmrb0hW.png",f="/my-blob/assets/%E7%AE%80%E5%8D%95%E5%8F%82%E6%95%B0%EF%BC%88%E5%8E%9F%E5%A7%8B%E6%96%B9%E5%BC%8F%EF%BC%89-D8EDGQu3.png",E="/my-blob/assets/%E7%AE%80%E5%8D%95%E5%8F%82%E6%95%B0%EF%BC%88SpringBoot%EF%BC%89-ULVhu9xb.png",v="/my-blob/assets/%E7%AE%80%E5%8D%95%E5%8F%82%E6%95%B02%EF%BC%88SpringBoot%EF%BC%89-CKko5F4d.png",B="/my-blob/assets/%E5%AE%9E%E4%BD%93%E5%8F%82%E6%95%B0-DIMqBpHz.png",y="/my-blob/assets/%E6%95%B0%E7%BB%84%E9%9B%86%E5%90%88%E5%8F%82%E6%95%B0-DfUB8HoY.png",x="/my-blob/assets/%E6%95%B0%E7%BB%84%E9%9B%86%E5%90%88%E5%8F%82%E6%95%B0%EF%BC%88%E9%9B%86%E5%90%88%E5%8F%82%E6%95%B0%EF%BC%89-CfgjJN0G.png",_="/my-blob/assets/%E6%97%A5%E6%9C%9F%E5%8F%82%E6%95%B0-DFtVP4Se.png",A="/my-blob/assets/%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0-Di-kw-M-.png",T="/my-blob/assets/%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE-9tpJgDdg.png",D="/my-blob/assets/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84-DQ_KmRuf.png",M="/my-blob/assets/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6-BDWldsi-.png",k="/my-blob/assets/IOC_DI%E5%85%A5%E9%97%A8-DYYAUBmi.png",F="/my-blob/assets/Bean%E7%9A%84%E5%A3%B0%E6%98%8E-DoLL3k6u.png",C="/my-blob/assets/Bean%E6%B3%A8%E5%85%A5%E9%94%99%E8%AF%AF-JtVIz4J7.png",z="/my-blob/assets/Bean%E6%B3%A8%E5%85%A5%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-CpD25V8A.png",P={},J=i('<h1 id="javaweb" tabindex="-1"><a class="header-anchor" href="#javaweb"><span>JavaWeb</span></a></h1><h2 id="maven" tabindex="-1"><a class="header-anchor" href="#maven"><span>Maven</span></a></h2><p><strong>什么是maven?</strong></p><p>Maven是apache旗下的一个开源项目，是一款用于管理和构建java项目的工具。</p><p><strong>Maven的作用</strong></p><figure><img src="'+n+'" alt="Maven的作用" tabindex="0" loading="lazy"><figcaption>Maven的作用</figcaption></figure><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><ul><li>Apache Maven 是一个项目管理和构建工具，它基于项目对象模型(POM)的概念，通过一小段描述信息来管理项目的构建。</li><li>作用: <ul><li>方便的依赖管理</li><li>统一的项目结构</li><li>标准的项目构建流程</li></ul></li><li>官网:<a href="http://maven.apache.org/" target="_blank" rel="noopener noreferrer">http://maven.apache.org/</a></li></ul><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><figure><img src="'+l+'" alt="安装" tabindex="0" loading="lazy"><figcaption>安装</figcaption></figure><h3 id="maven坐标" tabindex="-1"><a class="header-anchor" href="#maven坐标"><span>Maven坐标</span></a></h3><figure><img src="'+o+'" alt="Maven坐标" tabindex="0" loading="lazy"><figcaption>Maven坐标</figcaption></figure><h3 id="依赖管理" tabindex="-1"><a class="header-anchor" href="#依赖管理"><span>依赖管理</span></a></h3><h4 id="依赖配置" tabindex="-1"><a class="header-anchor" href="#依赖配置"><span>依赖配置</span></a></h4><ul><li>依赖：指当前项目运行所需要的jar包，一个项目中可以引入多个依赖</li><li>配置 <ul><li>1、在 pom.xml中编写<code>&lt;dependencies&gt;</code>标签</li><li>2、在<code>&lt;dependencies&gt;</code>标签中 使用<code>&lt;dependency&gt;</code>引入坐标定义</li><li>坐标的 <code>groupld，artifactld，version</code></li><li>点击刷新按钮，引入最新加入的坐标</li></ul></li></ul><figure><img src="'+r+'" alt="依赖配置" tabindex="0" loading="lazy"><figcaption>依赖配置</figcaption></figure><h4 id="依赖传递" tabindex="-1"><a class="header-anchor" href="#依赖传递"><span>依赖传递</span></a></h4><ul><li>依赖具有传递性 <ul><li>直接依赖：在当前项目中通过依赖配置建立的依赖关系</li><li>间接依赖：被依赖的资源如果依赖其他资源，当前项目简介依赖其他资源</li></ul></li></ul><figure><img src="'+s+'" alt="依赖传递" tabindex="0" loading="lazy"><figcaption>依赖传递</figcaption></figure><ul><li>排除依赖</li></ul><p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本。</p><figure><img src="'+d+'" alt="排除依赖" tabindex="0" loading="lazy"><figcaption>排除依赖</figcaption></figure><h4 id="依赖范围" tabindex="-1"><a class="header-anchor" href="#依赖范围"><span>依赖范围</span></a></h4><p>依赖的jar包，默认情况下，可以在任何地方使用。可以通过<code>&lt;scope&gt;...&lt;/scope&gt;</code>设置其作用范围。</p><blockquote><p>作用范围:</p><ul><li>主程序范围有效。(main文件夹范围内)</li><li>测试程序范围有效。(test文件夹范围内)</li><li>是否参与打包运行。(package指令范围内)</li></ul></blockquote><figure><img src="'+c+'" alt="依赖范围" tabindex="0" loading="lazy"><figcaption>依赖范围</figcaption></figure><h4 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h4><p>Maven的生命周期就是为了对所有的maven项目构建过程进行抽象和统一</p><p>Maven中有3套相互独立的生命周期:</p><ul><li>clean:清理工作。</li><li>default:核心工作，如:编译、测试、打包、安装、部署等</li><li>site:生成报告、发布站点等。</li></ul><figure><img src="'+p+'" alt="生命周期" tabindex="0" loading="lazy"><figcaption>生命周期</figcaption></figure><blockquote><p>clean：移除上一次构建生成的文件<br> compile：编译项目源代码<br> test：使用合适的单元测试框架运行测试(junit)<br> package：将编译后的文件打包，如:jar、war等<br> install：安装项目到本地仓库</p></blockquote><h2 id="http协议" tabindex="-1"><a class="header-anchor" href="#http协议"><span>HTTP协议</span></a></h2><h3 id="http-概述" tabindex="-1"><a class="header-anchor" href="#http-概述"><span>HTTP-概述</span></a></h3><ul><li>概念:Hyper Text Transfer Protocol，超文本传输协议，规定了浏览器和服务器之间数据传输的规则。</li><li>特点: <ol><li>基于TCP协议:面向连接，安全</li><li>基于请求-响应模型的:一次清求对应一次响应</li><li>HTTP协议是无状态的协议:对于事务处理没有记忆能力。每次请求-响应都是独立的。</li><li>缺点:多次请求间不能共享数据。</li><li>优点:速度快</li></ol></li></ul><h3 id="http-请求协议" tabindex="-1"><a class="header-anchor" href="#http-请求协议"><span>HTTP-请求协议</span></a></h3><h3 id="http-相应协议" tabindex="-1"><a class="header-anchor" href="#http-相应协议"><span>HTTP-相应协议</span></a></h3><figure><img src="'+g+'" alt="响应格式" tabindex="0" loading="lazy"><figcaption>响应格式</figcaption></figure><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong>——临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</td></tr><tr><td>2xx</td><td><strong>成功</strong>——表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong>——重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong>——处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong>——处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td>200</td><td><strong><code>OK</code></strong></td><td>客户端请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td></tr><tr><td>302</td><td><strong><code>Found</code></strong></td><td>指示所请求的资源已移动到由<code>Location</code>响应头给定的 URL，浏览器会自动重新访问到这个页面</td></tr><tr><td>304</td><td><strong><code>Not Modified</code></strong></td><td>告诉客户端，你请求的资源至上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向</td></tr><tr><td>400</td><td><strong><code>Bad Request</code></strong></td><td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td></tr><tr><td>403</td><td><strong><code>Forbidden</code></strong></td><td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td></tr><tr><td>404</td><td><strong><code>Not Found</code></strong></td><td><strong>请求资源不存在</strong>，一般是URL输入有误，或者网站资源被删除了</td></tr><tr><td>405</td><td><strong><code>Method Not Allowed</code></strong></td><td>请求方式有误，比如应该用GET请求方式的资源，用了POST</td></tr><tr><td>428</td><td><strong><code>Precondition Required</code></strong></td><td><strong>服务器要求有条件的请求</strong>，告诉客户端要想访问该资源，必须携带特定的请求头</td></tr><tr><td>429</td><td><strong><code>Too Many Requests</code></strong></td><td>指示用户在给定时间内发送了<strong>太多请求</strong>（“限速”），配合 Retry-After(多长时间后可以请求)响应头一起使用</td></tr><tr><td>431</td><td><strong><code> Request Header Fields Too Large</code></strong></td><td><strong>请求头太大</strong>，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。</td></tr><tr><td>500</td><td><strong><code>Internal Server Error</code></strong></td><td><strong>服务器发生不可预期的错误</strong>。服务器出异常了，赶紧看日志去吧</td></tr><tr><td>503</td><td><strong><code>Service Unavailable</code></strong></td><td><strong>服务器尚未准备好处理请求</strong>，服务器刚刚启动，还未初始化好</td></tr></tbody></table><h3 id="http-协议解析" tabindex="-1"><a class="header-anchor" href="#http-协议解析"><span>HTTP-协议解析</span></a></h3><h2 id="web服务器-tomcat" tabindex="-1"><a class="header-anchor" href="#web服务器-tomcat"><span>Web服务器-Tomcat</span></a></h2><figure><img src="'+h+'" alt="Tomcat" tabindex="0" loading="lazy"><figcaption>Tomcat</figcaption></figure><h3 id="tomcat-基本使用" tabindex="-1"><a class="header-anchor" href="#tomcat-基本使用"><span>Tomcat-基本使用</span></a></h3><ul><li>启动：bin/startup.bat</li><li>停止：bin/shutdown.bat</li><li>Tomcat部署项目：</li></ul><p>将项目放置到webapps目录下，即部署完成</p><h3 id="入门程序解析" tabindex="-1"><a class="header-anchor" href="#入门程序解析"><span>入门程序解析</span></a></h3><figure><img src="'+b+'" alt="springbootweb-程序解析" tabindex="0" loading="lazy"><figcaption>springbootweb-程序解析</figcaption></figure><blockquote><ul><li><p>起步依赖</p><ul><li>spring-boot-starter-web</li><li>spring-boot-starter-test</li></ul></li><li><p>内嵌Tomcat服务器</p><ul><li>基于Springboot开发的web应用程序，内置了tomcat服务器，当启<br> 动类运行时，会自动启动内嵌的tomdat服务器</li></ul></li></ul></blockquote><h2 id="请求响应" tabindex="-1"><a class="header-anchor" href="#请求响应"><span>请求响应</span></a></h2><figure><img src="'+u+'" alt="请求响应" tabindex="0" loading="lazy"><figcaption>请求响应</figcaption></figure><h3 id="请求" tabindex="-1"><a class="header-anchor" href="#请求"><span>请求</span></a></h3><h4 id="postman" tabindex="-1"><a class="header-anchor" href="#postman"><span>Postman</span></a></h4><figure><img src="'+m+'" alt="ApiPost" tabindex="0" loading="lazy"><figcaption>ApiPost</figcaption></figure><h4 id="简单参数" tabindex="-1"><a class="header-anchor" href="#简单参数"><span>简单参数</span></a></h4><ul><li>原始方式</li></ul><figure><img src="'+f+'" alt="简单参数（原始方式）" tabindex="0" loading="lazy"><figcaption>简单参数（原始方式）</figcaption></figure><ul><li>SpringBoot方式</li></ul><figure><img src="'+E+'" alt="简单参数（SpringBoot）" tabindex="0" loading="lazy"><figcaption>简单参数（SpringBoot）</figcaption></figure><figure><img src="'+v+'" alt="简单参数2（SpringBoot）" tabindex="0" loading="lazy"><figcaption>简单参数2（SpringBoot）</figcaption></figure><h4 id="实体参数" tabindex="-1"><a class="header-anchor" href="#实体参数"><span>实体参数</span></a></h4><ul><li>简单实体对象:请求参数名与形参对象属性名相同，定义POJ0接收即可</li></ul><figure><img src="'+B+'" alt="实体参数" tabindex="0" loading="lazy"><figcaption>实体参数</figcaption></figure><h4 id="数组集合参数" tabindex="-1"><a class="header-anchor" href="#数组集合参数"><span>数组集合参数</span></a></h4><ul><li>数组参数：请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</li></ul><figure><img src="'+y+'" alt="数组集合参数" tabindex="0" loading="lazy"><figcaption>数组集合参数</figcaption></figure><ul><li>集合参数：集合参数:请求参数名与形参集合名称相同且请求参数为多个，@RequestParam 绑定参数关系</li></ul><figure><img src="'+x+'" alt="数组集合参数（集合参数）" tabindex="0" loading="lazy"><figcaption>数组集合参数（集合参数）</figcaption></figure><h4 id="日期参数" tabindex="-1"><a class="header-anchor" href="#日期参数"><span>日期参数</span></a></h4><ul><li>日期参数：使用 @DateTimeFormat 注解完成日期参数格式转换</li></ul><figure><img src="'+_+'" alt="日期参数" tabindex="0" loading="lazy"><figcaption>日期参数</figcaption></figure><h4 id="json参数" tabindex="-1"><a class="header-anchor" href="#json参数"><span>Json参数</span></a></h4><ul><li>JSON参数：JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数，需要使用 @RequestBody 标识</li></ul><h4 id="路径参数" tabindex="-1"><a class="header-anchor" href="#路径参数"><span>路径参数</span></a></h4><ul><li>路径参数:通过请求URL直接传递参数，使用{...}来标识该路径参数，需要使用<code>@PathVariable</code>获取路径参数</li></ul><figure><img src="'+A+'" alt="路径参数" tabindex="0" loading="lazy"><figcaption>路径参数</figcaption></figure><h3 id="响应" tabindex="-1"><a class="header-anchor" href="#响应"><span>响应</span></a></h3><figure><img src="'+T+'" alt="响应数据" tabindex="0" loading="lazy"><figcaption>响应数据</figcaption></figure><h2 id="分层解耦" tabindex="-1"><a class="header-anchor" href="#分层解耦"><span>分层解耦</span></a></h2><h3 id="三层架构" tabindex="-1"><a class="header-anchor" href="#三层架构"><span>三层架构</span></a></h3><figure><img src="'+D+'" alt="三层架构" tabindex="0" loading="lazy"><figcaption>三层架构</figcaption></figure><h3 id="分层解耦-1" tabindex="-1"><a class="header-anchor" href="#分层解耦-1"><span>分层解耦</span></a></h3><ul><li>内聚：软件中各个功能模块内部的功能联系</li><li>耦合：衡量软件中各个层/模块之间的依赖、关联的程度</li><li>软件设计原则：高内聚低耦合。</li></ul><figure><img src="'+M+'" alt="分层解耦" tabindex="0" loading="lazy"><figcaption>分层解耦</figcaption></figure><h3 id="ioc-di入门" tabindex="-1"><a class="header-anchor" href="#ioc-di入门"><span>IOC &amp; DI入门</span></a></h3><figure><img src="'+k+'" alt="IOC&amp;DI入门" tabindex="0" loading="lazy"><figcaption>IOC&amp;DI入门</figcaption></figure><h3 id="ioc详解" tabindex="-1"><a class="header-anchor" href="#ioc详解"><span>IOC详解</span></a></h3><h4 id="bean的声明" tabindex="-1"><a class="header-anchor" href="#bean的声明"><span>Bean的声明</span></a></h4><figure><img src="'+F+'" alt="Bean的声明" tabindex="0" loading="lazy"><figcaption>Bean的声明</figcaption></figure><blockquote><p>注意事项：</p><ul><li>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。</li><li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@Controller。</li></ul></blockquote><h4 id="bean组件扫描" tabindex="-1"><a class="header-anchor" href="#bean组件扫描"><span>Bean组件扫描</span></a></h4><ul><li>前面声明bean的四大注解，要想生效，还需要被组件扫描注解@ComponentScan扫描。</li><li>@Componentscan注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解 @SpringBootApplication中，默认扫描的范围是启动类所在包及其子包。</li></ul><h3 id="di详解" tabindex="-1"><a class="header-anchor" href="#di详解"><span>DI详解</span></a></h3><h4 id="bean注入" tabindex="-1"><a class="header-anchor" href="#bean注入"><span>Bean注入</span></a></h4><ul><li>@Autowired注解，默认是按照类型进行，如果存在多个相同类型的bean，将会报出如下错误:</li></ul><figure><img src="'+C+'" alt="Bean注入错误" tabindex="0" loading="lazy"><figcaption>Bean注入错误</figcaption></figure><figure><img src="'+z+'" alt="Bean注入错误解决方案" tabindex="0" loading="lazy"><figcaption>Bean注入错误解决方案</figcaption></figure><blockquote><p>1、依赖注入的注解</p><ul><li>@Autowired:默认按照类型自动装配</li><li>如果同类型的bean存在多个: <ul><li>@Primary</li><li>@Autowired+@Qualifier(&quot;bean的名称&quot;)</li><li>@Resource(name=&quot;bean的名称”)</li></ul></li></ul><p>2、@Resource与@Autowired区别</p><ul><li>@Autowired 是spring框架提供的注解，而@Resource是JDK提供的注解</li><li>@Autowired 默认是按照类型注入，而@Resource默认是按照名称注入。</li></ul></blockquote>',98),w=[J];function q(O,S){return e(),a("div",null,w)}const I=t(P,[["render",q],["__file","JavaWeb.html.vue"]]),j=JSON.parse('{"path":"/category/Java/JavaWeb/JavaWeb.html","title":"JavaWeb","lang":"zh-CN","frontmatter":{"description":"JavaWeb Maven 什么是maven? Maven是apache旗下的一个开源项目，是一款用于管理和构建java项目的工具。 Maven的作用 Maven的作用Maven的作用 介绍 Apache Maven 是一个项目管理和构建工具，它基于项目对象模型(POM)的概念，通过一小段描述信息来管理项目的构建。 作用: 方便的依赖管理 统一的项目结...","head":[["meta",{"property":"og:url","content":"https://studentdj.github.io/my-blob/category/Java/JavaWeb/JavaWeb.html"}],["meta",{"property":"og:site_name","content":"月岛"}],["meta",{"property":"og:title","content":"JavaWeb"}],["meta",{"property":"og:description","content":"JavaWeb Maven 什么是maven? Maven是apache旗下的一个开源项目，是一款用于管理和构建java项目的工具。 Maven的作用 Maven的作用Maven的作用 介绍 Apache Maven 是一个项目管理和构建工具，它基于项目对象模型(POM)的概念，通过一小段描述信息来管理项目的构建。 作用: 方便的依赖管理 统一的项目结..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-24T08:25:01.000Z"}],["meta",{"property":"article:author","content":"月岛"}],["meta",{"property":"article:modified_time","content":"2024-05-24T08:25:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaWeb\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-24T08:25:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"月岛\\",\\"url\\":\\"https://studentdj.github.io/my-blob/\\"}]}"]]},"headers":[{"level":2,"title":"Maven","slug":"maven","link":"#maven","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"Maven坐标","slug":"maven坐标","link":"#maven坐标","children":[]},{"level":3,"title":"依赖管理","slug":"依赖管理","link":"#依赖管理","children":[]}]},{"level":2,"title":"HTTP协议","slug":"http协议","link":"#http协议","children":[{"level":3,"title":"HTTP-概述","slug":"http-概述","link":"#http-概述","children":[]},{"level":3,"title":"HTTP-请求协议","slug":"http-请求协议","link":"#http-请求协议","children":[]},{"level":3,"title":"HTTP-相应协议","slug":"http-相应协议","link":"#http-相应协议","children":[]},{"level":3,"title":"HTTP-协议解析","slug":"http-协议解析","link":"#http-协议解析","children":[]}]},{"level":2,"title":"Web服务器-Tomcat","slug":"web服务器-tomcat","link":"#web服务器-tomcat","children":[{"level":3,"title":"Tomcat-基本使用","slug":"tomcat-基本使用","link":"#tomcat-基本使用","children":[]},{"level":3,"title":"入门程序解析","slug":"入门程序解析","link":"#入门程序解析","children":[]}]},{"level":2,"title":"请求响应","slug":"请求响应","link":"#请求响应","children":[{"level":3,"title":"请求","slug":"请求","link":"#请求","children":[]},{"level":3,"title":"响应","slug":"响应","link":"#响应","children":[]}]},{"level":2,"title":"分层解耦","slug":"分层解耦","link":"#分层解耦","children":[{"level":3,"title":"三层架构","slug":"三层架构","link":"#三层架构","children":[]},{"level":3,"title":"分层解耦","slug":"分层解耦-1","link":"#分层解耦-1","children":[]},{"level":3,"title":"IOC & DI入门","slug":"ioc-di入门","link":"#ioc-di入门","children":[]},{"level":3,"title":"IOC详解","slug":"ioc详解","link":"#ioc详解","children":[]},{"level":3,"title":"DI详解","slug":"di详解","link":"#di详解","children":[]}]}],"git":{"createdTime":1716539101000,"updatedTime":1716539101000,"contributors":[{"name":"DJ","email":"2412205377@qq.com","commits":1}]},"readingTime":{"minutes":7.46,"words":2237},"filePathRelative":"category/Java/JavaWeb/JavaWeb.md","localizedDate":"2024年5月24日","excerpt":"\\n<h2>Maven</h2>\\n<p><strong>什么是maven?</strong></p>\\n<p>Maven是apache旗下的一个开源项目，是一款用于管理和构建java项目的工具。</p>\\n<p><strong>Maven的作用</strong></p>\\n<figure><figcaption>Maven的作用</figcaption></figure>\\n<h3>介绍</h3>\\n<ul>\\n<li>Apache Maven 是一个项目管理和构建工具，它基于项目对象模型(POM)的概念，通过一小段描述信息来管理项目的构建。</li>\\n<li>作用:\\n<ul>\\n<li>方便的依赖管理</li>\\n<li>统一的项目结构</li>\\n<li>标准的项目构建流程</li>\\n</ul>\\n</li>\\n<li>官网:<a href=\\"http://maven.apache.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">http://maven.apache.org/</a></li>\\n</ul>","autoDesc":true}');export{I as comp,j as data};
