import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as e}from"./app-BSHJb8UQ.js";const t={},p=e(`<h1 id="大文件上传" tabindex="-1"><a class="header-anchor" href="#大文件上传"><span>大文件上传</span></a></h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>我们都知道JavaScript是单线程的语言，也就是说同步代码都需要排队去执行，这样就会造成很多问题，就比如今天讲的：数据量大的excel文件的导入导出，会造成整个页面出现“假卡死”的现象。</p><p>什么是“假卡死”呢？意思就是页面其实并没有卡死，但是用户做一些操作时，页面并没有及时给到反馈，这就会让用户觉得页面卡死了~</p><h2 id="数据量大的excel" tabindex="-1"><a class="header-anchor" href="#数据量大的excel"><span>数据量大的excel</span></a></h2><p>数据量大的excel文件的导入导出，就会造成这个问题，原因是当我们使用库去解析数据量大的excel时，是非常耗时的，这就导致了后面的代码执行不了，所以出现“假卡死”现象</p><p>![640](C:\\Users\\Alex Mercer\\Desktop\\笔记\\640.png)</p><p>我们可以通过一个小案例来体现出这个问题，我们先准备一个 excel 文件，它差不多有 1w 行数据</p><p>![640 (2)](C:\\Users\\Alex Mercer\\Desktop\\笔记\\640 (2).png)</p><p>接着我们在项目中去装<code>xlsx</code>这个插件，用于解析待会导入的excel文件</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>pnpm i xlsx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着准备一个上传的input，和一个按钮button，并准备他们对应的事件</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleImport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">handleImport</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">ev</span><span class="token operator">:</span> Event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// 使用FileReader读取文件内容</span>
  <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;解析excel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用SheetJS的XLSX库解析文件数据</span>
    <span class="token keyword">const</span> workbook <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;array&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;解析excel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取工作表对象</span>
    <span class="token keyword">const</span> firstSheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span>Sheets<span class="token punctuation">[</span>workbook<span class="token punctuation">.</span>SheetNames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 解析工作表数据</span>
    <span class="token keyword">const</span> jsonData <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">sheet_to_json</span><span class="token punctuation">(</span>firstSheet<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 处理解析后的数据</span>
    <span class="token comment">// console.log(jsonData);</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 读取文件</span>
  reader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;打印&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候，我们去导入excel文件，然后马上去点击按钮，期望的输出顺序肯定是</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">-</span><span class="token operator">&gt;</span> 打印
<span class="token operator">-</span><span class="token operator">&gt;</span> 解析excel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为解析excel是需要时间的，差不多要2-3s，在这2-3s中去点击按钮，应该先让按钮点击的事件先执行，但是事实上效果不是这样的，我这里其实在上传过程中点了很多次按钮了，但是就是不打印，而是等到excel解析完之后，才会打印，这就像卡死了一样，明明我点了按钮，但就是没反应</p><p>![640](C:\\Users\\Alex Mercer\\Desktop\\笔记\\640.gif)</p><h2 id="webworker解决导入" tabindex="-1"><a class="header-anchor" href="#webworker解决导入"><span><code>WebWorker</code>解决导入</span></a></h2><p>这个问题可以用 WebWorker 来解决，WebWorker 能开启一个子线程，来做一些我们需要让它做的事情，并把结果返回到主线程，这样就可以不阻塞主线程的代码执行了~</p><p>![640 (2)](C:\\Users\\Alex Mercer\\Desktop\\笔记\\640 (2).png)</p><h3 id="webworker-vs-settimeout" tabindex="-1"><a class="header-anchor" href="#webworker-vs-settimeout"><span><code>WebWorker</code> VS <code>setTimeout</code></span></a></h3><p>有人就问了，为啥要使用 <code>WebWorker</code>，而不是 <code>setTimout</code> 呢？不是照样也可以吗？</p><ul><li>其实在单核电脑上，它两确实没啥区别，但是在多核电脑上，<code>WebWorker</code> 可以同时使用多个<code>cpu</code>来计算， 速度比 <code>setTimeout</code>快~</li><li><code>setTimeout</code> 还是在主线程上执行，还是会占主线程的资源影响主线程的执行，但是 <code>WebWorker</code>跟主线程是隔离开的</li></ul><h3 id="代码-效果" tabindex="-1"><a class="header-anchor" href="#代码-效果"><span>代码 &amp; 效果</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">handleImport</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ev<span class="token operator">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>
    <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
        importScripts(&#39;https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.4/xlsx.full.min.js&#39;);
        onmessage = function(e) {
          const fileData = e.data;
          const workbook = XLSX.read(fileData, { type: &#39;array&#39; });
          const sheetName = workbook.SheetNames[0];
          const sheet = workbook.Sheets[sheetName];
          const data = XLSX.utils.sheet_to_json(sheet, { header: 1 });
          postMessage(data);
        };
        </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 使用FileReader读取文件内容</span>
  <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 读取文件</span>
  reader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 监听Web Worker返回的消息</span>
  worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;解析完成&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    worker<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当任务完成后，终止Web Worker</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，在解析excel的过程中，点击按钮的事件并不会被阻塞到了~</p><p>![640 (1)](C:\\Users\\Alex Mercer\\Desktop\\笔记\\640 (1).gif)</p><h2 id="webworker解决导出" tabindex="-1"><a class="header-anchor" href="#webworker解决导出"><span><code>WebWorker</code>解决导出</span></a></h2><p>道理都是一样的，就是利用 <code>WebWorker</code> 来帮我们做一些比较耗时的事情</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">handleExport</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>
    <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
        importScripts(&#39;https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.4/xlsx.full.min.js&#39;);
        onmessage = function(e) {
          const data = e.data;
          const workbook = XLSX.utils.book_new();
          const sheetData = e.data
          const worksheet = XLSX.utils.aoa_to_sheet(sheetData);
          XLSX.utils.book_append_sheet(workbook, worksheet, &#39;Sheet1&#39;);
          const excelData = XLSX.write(workbook, { type: &#39;array&#39;, bookType: &#39;xlsx&#39; });
          postMessage(excelData, [excelData.buffer]);
        };
        </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> excelData <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span>

    <span class="token comment">// 创建 Blob 对象，用于保存 Excel 文件数据</span>
    <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>excelData<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建下载链接并触发下载</span>
    <span class="token keyword">const</span> downloadLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    downloadLink<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
    downloadLink<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">&#39;export.xlsx&#39;</span><span class="token punctuation">;</span>
    downloadLink<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 终止 Web Worker</span>
    worker<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>你的数据<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),o=[p];function c(l,i){return a(),s("div",null,o)}const k=n(t,[["render",c],["__file","大文件上传.html.vue"]]),d=JSON.parse('{"path":"/JavaScript/other/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html","title":"大文件上传","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2023-10-31T00:00:00.000Z","star":true,"category":["大文件上传"],"tag":["Vue","TypeScript","Web Worker"],"footer":"","description":"大文件上传 背景 我们都知道JavaScript是单线程的语言，也就是说同步代码都需要排队去执行，这样就会造成很多问题，就比如今天讲的：数据量大的excel文件的导入导出，会造成整个页面出现“假卡死”的现象。 什么是“假卡死”呢？意思就是页面其实并没有卡死，但是用户做一些操作时，页面并没有及时给到反馈，这就会让用户觉得页面卡死了~ 数据量大的excel...","head":[["meta",{"property":"og:url","content":"https://studentdj.github.io/my-blob/JavaScript/other/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html"}],["meta",{"property":"og:site_name","content":"月岛"}],["meta",{"property":"og:title","content":"大文件上传"}],["meta",{"property":"og:description","content":"大文件上传 背景 我们都知道JavaScript是单线程的语言，也就是说同步代码都需要排队去执行，这样就会造成很多问题，就比如今天讲的：数据量大的excel文件的导入导出，会造成整个页面出现“假卡死”的现象。 什么是“假卡死”呢？意思就是页面其实并没有卡死，但是用户做一些操作时，页面并没有及时给到反馈，这就会让用户觉得页面卡死了~ 数据量大的excel..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-24T08:38:34.000Z"}],["meta",{"property":"article:author","content":"月岛"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:tag","content":"Web Worker"}],["meta",{"property":"article:published_time","content":"2023-10-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-24T08:38:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"大文件上传\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-24T08:38:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"月岛\\",\\"url\\":\\"https://studentdj.github.io/my-blob/\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"数据量大的excel","slug":"数据量大的excel","link":"#数据量大的excel","children":[]},{"level":2,"title":"WebWorker解决导入","slug":"webworker解决导入","link":"#webworker解决导入","children":[{"level":3,"title":"WebWorker VS setTimeout","slug":"webworker-vs-settimeout","link":"#webworker-vs-settimeout","children":[]},{"level":3,"title":"代码 & 效果","slug":"代码-效果","link":"#代码-效果","children":[]}]},{"level":2,"title":"WebWorker解决导出","slug":"webworker解决导出","link":"#webworker解决导出","children":[]}],"git":{"createdTime":1716539914000,"updatedTime":1716539914000,"contributors":[{"name":"DJ","email":"2412205377@qq.com","commits":1}]},"readingTime":{"minutes":3.73,"words":1119},"filePathRelative":"JavaScript/other/大文件上传.md","localizedDate":"2023年10月31日","excerpt":"\\n<h2>背景</h2>\\n<p>我们都知道JavaScript是单线程的语言，也就是说同步代码都需要排队去执行，这样就会造成很多问题，就比如今天讲的：数据量大的excel文件的导入导出，会造成整个页面出现“假卡死”的现象。</p>\\n<p>什么是“假卡死”呢？意思就是页面其实并没有卡死，但是用户做一些操作时，页面并没有及时给到反馈，这就会让用户觉得页面卡死了~</p>\\n<h2>数据量大的excel</h2>\\n<p>数据量大的excel文件的导入导出，就会造成这个问题，原因是当我们使用库去解析数据量大的excel时，是非常耗时的，这就导致了后面的代码执行不了，所以出现“假卡死”现象</p>\\n<p>![640](C:\\\\Users\\\\Alex Mercer\\\\Desktop\\\\笔记\\\\640.png)</p>","autoDesc":true}');export{k as comp,d as data};
