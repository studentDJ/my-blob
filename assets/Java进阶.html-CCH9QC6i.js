import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as t,b as p}from"./app-BSHJb8UQ.js";const e="/my-blob/assets/Extends-1-D1lIgRVm.png",o="/my-blob/assets/%E5%A4%9A%E6%80%81-Bx6Iz6JQ.png",l="/my-blob/assets/%E6%8E%A5%E5%8F%A3%E6%96%B0%E7%89%B9%E6%80%A7-T0mIBLKY.png",c="/my-blob/assets/%E4%BA%8B%E4%BB%B6-DXJEraJu.png",i="/my-blob/assets/%E4%BA%8B%E4%BB%B62-CMNCiQCV.png",u="/my-blob/assets/%E9%80%82%E9%85%8D%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-DD6-nHa2.png",r="/my-blob/assets/%E5%8C%85%E8%A3%85%E7%B1%BB-3AJziKrE.png",k="/my-blob/assets/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F-DHQnV56u.png",d="/my-blob/assets/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-BNTQSm6L.png",m="/my-blob/assets/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-DZ0TRlGj.png",v="/my-blob/assets/%E6%AD%A3%E5%88%99%E6%A1%88%E4%BE%8B-4ThNvETG.png",b="/my-blob/assets/SimpleDateFormat-A1D0-e5B.png",g="/my-blob/assets/%E5%8C%BA%E5%88%AB-beCktt_1.png",h="/my-blob/assets/JDK8%E7%89%88%E6%9C%AC%E5%90%8E%E6%97%B6%E9%97%B4API-DWMhM5_6.png",f="/my-blob/assets/LocalDate-Xx04WNxq.png",y="/my-blob/assets/%E4%BF%AE%E6%94%B9%E5%B9%B4%E6%9C%88%E6%97%A5%E6%97%B6%E5%88%86%E7%A7%92%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B9%E6%B3%95-iR-DIC5p.png",E="/my-blob/assets/DateFormatter-CTeh0W3j.png",q="/my-blob/assets/Instant-CXU_623T.png",w="/my-blob/assets/%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB-xecN83tx.png",x="/my-blob/assets/%E9%9B%86%E5%90%88-CNrfJDHZ.png",n="/my-blob/assets/%E5%8D%95%E5%88%97%E9%9B%86%E5%90%88-hpirM7XR.png",B="/my-blob/assets/%E5%A2%9E%E5%BC%BAfor%E5%BE%AA%E7%8E%AF-CvY2YIuM.png",S="/my-blob/assets/list%E6%8E%A5%E5%8F%A3-BsQiit0j.png",A="/my-blob/assets/LinkedList%E7%B1%BB-48HZ0Tv1.png",j="/my-blob/assets/%E6%B3%9B%E5%9E%8B-Dv7AX3lW.png",F="/my-blob/assets/TreeSet%E8%87%AA%E7%84%B6%E6%8E%92%E5%BA%8F-Xu7PIXG6.png",C="/my-blob/assets/TreeSet%E6%AF%94%E8%BE%83%E5%99%A8%E6%8E%92%E5%BA%8F-CswfW7dH.png",_="/my-blob/assets/hashCode%E6%96%B9%E6%B3%95-BKr78y1k.png",D="/my-blob/assets/HashCode%E6%96%B9%E6%B3%9502-Dect4Ozp.png",z="/my-blob/assets/%E6%8F%90%E9%AB%98%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD-DXN5BbKK.png",I="/my-blob/assets/Collections%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB-BpBfnpLq.png",T="/my-blob/assets/Map%E6%8E%A5%E5%8F%A3-C1opdSr-.png",L="/my-blob/assets/Map%E7%9A%84%E5%B8%B8%E7%94%A8API-w3ZNTQrQ.png",O="/my-blob/assets/Map%E6%8E%A5%E5%8F%A3%E7%89%B9%E7%82%B9-CQhdz4UU.png",P="/my-blob/assets/Map%E9%9B%86%E5%90%88%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F-D0eEgeaJ.png",J="/my-blob/assets/%E9%80%9A%E8%BF%87%E9%94%AE%E6%89%BE%E5%80%BC-X5jVvNXK.png",M="/my-blob/assets/%E9%80%9A%E8%BF%87%E9%94%AE%E5%80%BC%E5%AF%B9%E5%AF%B9%E8%B1%A1%E8%8E%B7%E5%8F%96%E9%94%AE%E5%92%8C%E5%80%BC-DKHIlZeo.png",N="/my-blob/assets/%E9%80%9A%E8%BF%87forEach%E6%96%B9%E6%B3%95%E9%81%8D%E5%8E%86-CpYULv9E.png",H="/my-blob/assets/%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97-DfKYUYwV.png",K="/my-blob/assets/%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84-BMCECGWX.png",R="/my-blob/assets/%E9%93%BE%E8%A1%A81-C1OxauXy.png",U="/my-blob/assets/%E9%93%BE%E8%A1%A82-CxXHA_F4.png",Z="/my-blob/assets/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91-CGvJTf5X.png",W="/my-blob/assets/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91-C2OCkcLd.png",V="/my-blob/assets/%E7%BA%A2%E9%BB%91%E6%A0%91-Drlkf2UP.png",X="/my-blob/assets/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9%E8%A7%84%E5%88%99-Cc6mF1WL.png",Q="/my-blob/assets/Stream%E6%B5%81%E6%80%9D%E6%83%B3-DH5tR-4r.png",G="/my-blob/assets/Stream%E6%B5%81%E4%B8%AD%E9%97%B4%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95-BizblpI4.png",Y="/my-blob/assets/Stream%E6%B5%81%E7%BB%88%E7%BB%93%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95-DxqOAkIa.png",$="/my-blob/assets/Stream%E6%B5%81%E6%94%B6%E9%9B%86-BlXHvSmn.png",nn="/my-blob/assets/Collector%E5%B7%A5%E5%85%B7%E7%B1%BB-CE23oMgU.png",sn="/my-blob/assets/File%E7%B1%BB%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1-_lK2_hVF.png",an="/my-blob/assets/File%E7%B1%BB%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95-C-D63u5o.png",tn="/my-blob/assets/File%E7%B1%BB%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4%E6%96%B9%E6%B3%95-jqaQpORD.png",pn="/my-blob/assets/File%E7%B1%BB%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95-Ca58jKDG.png",en="/my-blob/assets/IO%E6%B5%81%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-CzR3GE1X.png",on="/my-blob/assets/FileOutputStream%E5%AD%97%E8%8A%82%E8%BE%93%E5%87%BA%E6%B5%81-BpbaWKoV.png",ln="/my-blob/assets/%E6%A0%87%E5%87%86%E7%9A%84%E5%85%B3%E6%B5%81%E4%BB%A3%E7%A0%81-BV4lH6GS.png",cn="/my-blob/assets/FileInputStream%E5%AD%97%E8%8A%82%E8%BE%93%E5%85%A5%E6%B5%81-D2vuzQpp.png",un="/my-blob/assets/FileInputStream%E5%AD%97%E8%8A%82%E8%BE%93%E5%85%A5%E6%B5%811-DtSnVBmg.png",rn="/my-blob/assets/%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B5%81-C1XVTJbc.png",kn="/my-blob/assets/%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B5%81%E8%AF%BB%E5%86%99%E8%BF%87%E7%A8%8B-DbziNdzx.png",dn="/my-blob/assets/FileReader%E5%AD%97%E7%AC%A6%E8%BE%93%E5%85%A5%E6%B5%81-BWHfipYN.png",mn="/my-blob/assets/%E7%BC%96%E7%A0%81-D_aWlhWy.png",vn="/my-blob/assets/%E8%A7%A3%E7%A0%81-DI5cHW2C.png",bn="/my-blob/assets/FileWriter%E5%AD%97%E7%AC%A6%E8%BE%93%E5%87%BA%E6%B5%81-t3D6Q5P3.png",gn="/my-blob/assets/FileWriter%E5%AD%97%E7%AC%A6%E8%BE%93%E5%87%BA%E6%B5%811-CFlh_qAD.png",hn="/my-blob/assets/%E5%AD%97%E7%AC%A6%E7%BC%93%E5%86%B2%E6%B5%81%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95-CRP0B9b_.png",fn="/my-blob/assets/%E7%89%B9%E6%9C%89%E6%96%B9%E6%B3%95-DpiJULma.png",yn="/my-blob/assets/%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81-o2q_1lyD.png",En="/my-blob/assets/%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E6%96%B9%E6%B3%95-C8IFgzHj.png",qn="/my-blob/assets/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81-BwD32eoK.png",wn="/my-blob/assets/%E6%89%93%E5%8D%B0%E6%B5%81-B5t55meg.png",xn="/my-blob/assets/%E5%AD%97%E8%8A%82%E6%89%93%E5%8D%B0%E6%B5%81-C9XtryiH.png",Bn="/my-blob/assets/%E5%AD%97%E8%8A%82%E6%89%93%E5%8D%B0%E6%B5%81%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95-D9gU994F.png",Sn="/my-blob/assets/%E5%AD%97%E7%AC%A6%E6%89%93%E5%8D%B0%E6%B5%81-CHBoliVn.png",An="/my-blob/assets/%E5%AD%97%E7%AC%A6%E6%89%93%E5%8D%B0%E6%B5%81%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95-IGEAkFDJ.png",jn="/my-blob/assets/%E5%AD%97%E7%AC%A6%E6%89%93%E5%8D%B0%E6%B5%81%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95-CBReiLFy.png",Fn="/my-blob/assets/%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%B5%81%E5%92%8C%E5%8E%8B%E7%BC%A9%E6%B5%81-DIKnatVV.png",Cn="/my-blob/assets/Commons-io%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95-CTnu0Cwk.png",_n="/my-blob/assets/IOUtils%E7%B1%BB(%E6%B5%81%E7%9B%B8%E5%85%B3)-BWHJz6u5.png",Dn="/my-blob/assets/HuTool%E5%B7%A5%E5%85%B7%E5%8C%85-_uhkIlzR.png",zn="/my-blob/assets/properties%E9%85%8D%E5%88%B6%E6%96%87%E4%BB%B6-C8f6bOjG.png",In="/my-blob/assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F-CQQ3MUnW.png",Tn="/my-blob/assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%89%E5%BC%A0%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94-C4kLlUw4.png",Ln="/my-blob/assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B8%B8%E8%A7%81%E7%9A%84%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95-BoN7zEdA.png",On="/my-blob/assets/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-Eaz3gYr7.png",Pn="/my-blob/assets/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E7%9A%84%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84-CwfrQG_H.png",Jn="/my-blob/assets/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%96%B9%E6%B3%95-ClhLiC5F.png",Mn="/my-blob/assets/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0-Bnl-wIZp.png",Nn="/my-blob/assets/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%A7%E5%B0%8F%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95-9wANsb-o.png",Hn="/my-blob/assets/%E5%8D%8F%E8%AE%AE-DHUiLXKu.png",Kn="/my-blob/assets/UDP%E7%9A%84%E4%B8%89%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F-CrkE079S.png",Rn="/my-blob/assets/TCP%E9%80%9A%E4%BF%A1%E8%BF%9E%E6%8E%A5-DmaNxmB6.png",Un="/my-blob/assets/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B-B1UIOIpX.png",Zn="/my-blob/assets/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B-CWwCGf8u.png",Wn="/my-blob/assets/%E5%8F%8D%E5%B0%84-_AbrQRee.png",Vn="/my-blob/assets/%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8E%9F%E7%90%86-B0YNJLGd.png",Xn="/my-blob/assets/%E5%85%83%E6%B3%A8%E8%A7%A3-C4N6BH1s.png",Qn="/my-blob/assets/%E6%B3%A8%E8%A7%A3%E7%9A%84%E8%A7%A3%E6%9E%90-Bd0cZWbZ.png",Gn="/my-blob/assets/%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1-BlKVjsQD.png",Yn={},$n=p('<h1 id="java-进阶" tabindex="-1"><a class="header-anchor" href="#java-进阶"><span>Java 进阶</span></a></h1><h2 id="面向对象高级" tabindex="-1"><a class="header-anchor" href="#面向对象高级"><span>面向对象高级</span></a></h2><h3 id="static-关键字" tabindex="-1"><a class="header-anchor" href="#static-关键字"><span>static 关键字</span></a></h3><blockquote><p>static 是静态的意思，可以修饰成员变量，也可以修饰成员方法</p></blockquote><p><strong>static 修饰成员的特点：</strong></p><ul><li>1、被类的所有对象所共享</li><li>2、多了一种调用方式，可以通过类目进行调用</li><li>3、随着类的加载而加载，优先于对象存在</li></ul><p><strong>static 成员变量</strong></p><ul><li>共享数据</li></ul><p><strong>static 成员方法</strong></p><ul><li>常用与工具类</li></ul><blockquote><p>1、成员方法什么时候加入 static</p><ul><li>常用于制作工具类</li></ul><p>2、工具类：不是描述事物的，而是帮我们完成一些事情（打工）</p><p>3、如果发现一个类中，所有的方法，全都是 static 所修饰</p><ul><li>私有该类的构造方法</li><li>目的：为了不让其他类，再创建对象</li></ul></blockquote><blockquote><p>注意事项：</p><ul><li>static 方法中，只能访问静态成员（直接访问）</li><li>static 中不允许使用 this 关键字</li></ul></blockquote><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h3><p><strong>继承介绍</strong></p><blockquote><p>继承：让类与类之间产生关系（子父类关系），子类可以直接使用父类中非私有的成员</p></blockquote><p><strong>继承的格式</strong></p><blockquote><ul><li>格式 <code>public class 子类名 extends 父类名 {}</code></li></ul></blockquote><p><strong>什么时候使用继承？</strong></p><blockquote><ul><li>当类于类之间，存在相同的内容，并且产生了<code>is</code> <code>a </code>的关系，就可以考虑使用继承，来优化代码</li></ul></blockquote><p><strong>继承中的成员访问特点 -- 成员变量</strong></p><ul><li>思考：子父类中，如果出现了重名的成员变量，使用的时候会优先使用？ <ul><li><code>根据就近原则，优先使用子类的</code></li></ul></li><li>this：调用本类成员</li><li>super：调用父类成员</li><li>思考：子类继承了父类之后，是否可以自己继续定义方法？ <ul><li><code>子父类中，出现了声明一模一样的方法（方法名，参数，返回值），在创建子类对象，调用方法的时候，会优先使用子类的方法逻辑，这虽然是就近原则的现象，但其实是子类的方法，对父类的方法进行了重写操作。</code></li></ul></li></ul><blockquote><ul><li>方法重写（Override）</li><li>在子父类当中，出现了方法声明一模一样的方法（方法名，参数，返回值）</li><li>判断一个方法是不是重写的方法 <ul><li>注解：<code>@Override</code></li></ul></li><li>方法重写的使用场景： <ul><li>当子类需要父类的方法，但觉得父类的方法逻辑不好（修改 | 增强）就可以对父类的方法进行重写</li></ul></li><li>方法重载(Overload)</li><li>在同一个类中，方法名相同，参数不同，与返回值无关参数不同:类型不同，个数不同，顺不同</li></ul></blockquote><p><strong>继承中的成员访问特点 -- 成员方法</strong></p><blockquote><p>在继承体系中，子类可以继承到父类的方法</p><p>但有时子类并不想原封不动地继承父类的方法，而是想作一定的修改</p><p>这就需要采用方法的重写，方法重写又称方法覆盖</p><p><strong>注意事项</strong></p><ul><li>父类中私有的方法不能重写</li><li>子类重写父类方法时，访问权限必须大于等于父类</li></ul></blockquote><p><strong>权限修饰符</strong></p><figure><img src="'+e+`" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><p><strong>Java 中继承的特点</strong></p><ul><li>Java 只支持单继承，不支持多继承，但支持多层继承</li></ul><p><strong>继承中的成员访问特点 ---- 构造方法</strong></p><ul><li>子类需要自己手动编写构造方法</li><li>子类在初始化之前，需要先完成父类的初始化</li><li>在所有的构造方法中，都默认隐藏了一句话 <code>super()</code><ul><li>通过这句代码，来访问父类的空参构造方法</li><li>细节：Java 当中所有的类，都直接或间接的继承到了<code>Object</code>类</li></ul></li></ul><p><strong>this 和 super</strong></p><ul><li>this：代表本类对象的引用</li><li>super：代表父类存储空间的标识</li></ul><table><thead><tr><th>关键字</th><th>访问成员变量</th><th>访问成员方法</th><th>构造方法</th></tr></thead><tbody><tr><td>this</td><td>this.本类成员变量</td><td>this.本类成员方法（）</td><td><code>this()，this(...)</code>本类构造方法</td></tr><tr><td>super</td><td>super.父类成员变量</td><td>super.父类成员方法()</td><td><code>super(),super(...)</code>父类构造方法</td></tr></tbody></table><p><strong>注：this（）和 super（）都在争夺构造方法第一行的位置，所以二者不能共存</strong></p><h3 id="final-关键字" tabindex="-1"><a class="header-anchor" href="#final-关键字"><span>final 关键字</span></a></h3><p><strong>final 关键字的介绍</strong></p><p>final 关键字是最终的意思，可以修饰（方法，类，变量）</p><p><strong>final</strong>修饰的特点</p><ul><li><strong>修饰方法</strong>：表明该方法是最终方法，不能被重写</li><li><strong>修饰类</strong>：表明该类是最终类，不能被继承</li><li><strong>修饰变量</strong>：表明该变量是常量，不能再次被赋值</li></ul><blockquote><p>final 修饰变量的命名规范：</p><ul><li>如果变量名是一个单词，所有字母大写 max =&gt; MAX</li><li>如果变量名是多个单词，所有字母大写，中间使用下划线分割 maxValue =&gt; MAX_VALUE</li></ul></blockquote><blockquote><p>基本数据类型：数据值不可改变</p><p>引用数据类型：地址值不可改变，但是内容可以改变</p></blockquote><blockquote><p>final 修饰成员变量的注意事项：</p><ul><li>1、final 修饰成员变量，不允许修饰默认值</li><li>2、final 修饰成员变了的初始化时机 <ul><li>1、在定义的时候直接赋值</li><li>2、在构造方法中完成赋值</li></ul></li></ul></blockquote><h3 id="包" tabindex="-1"><a class="header-anchor" href="#包"><span>包</span></a></h3><blockquote><p>什么是包？</p><ul><li>包本质来说就是文件夹，用来管理类文件的</li><li>建包的语法格式:package 公司域名倒写.技术名称。报名建议全部英文小写，且具备意义</li></ul></blockquote><blockquote><p>导包</p><ul><li>相同包下的类可以直接访问，不同包下的类必须导包,才可以使用!导包格式:<code>import 包名.类名</code>;</li><li>假如一个类中需要用到不同类，而这个两个类的名称是一样的，那么默认只能导入一个类，另一个类要带包名访问。</li></ul></blockquote><h3 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类"><span>抽象类</span></a></h3><p><strong>抽象类是一种特殊的父类，内部可以编写抽象方法</strong></p><blockquote><p>抽象类：特殊的父类</p><p>问题：特殊在哪里？</p><p>回答：内部允许编写抽象方法</p><p>问题：什么是抽象方法？</p><p>回答：当我们将共性的方法，抽取到父类之后，发现这个方法在父类中无法给出具体明确（描述不清了）而且这个方法，还是子类必须要有的方法，就可以设计为抽象方法</p></blockquote><blockquote><p><strong>抽象方法和抽象类</strong></p><ul><li>抽象方法的定义格式： <ul><li><code>public abstract 返回值类型 方法名（参数列表）</code>;</li></ul></li><li>抽象类的定义格式: <ul><li><code>public abstract class 类目{}</code></li></ul></li></ul></blockquote><blockquote><ul><li>抽象类不能实例化 <ul><li>如果抽象类允许创建对象，就可以调用内部没有方法体的，抽象方法了</li></ul></li><li>抽象类存在构造方法 <ul><li>交给子类，通过 super 进行访问</li></ul></li><li>抽象类中可以存在普通方法 <ul><li>可以让子类继承到继续使用</li></ul></li><li>抽象类的子类 <ul><li>要么重写抽象类中的所有抽象方法</li><li>要么是抽象类</li></ul></li></ul></blockquote><blockquote><p><strong>abstract 关键字的冲突</strong></p><ul><li><code>final</code> ：被<code>abstract</code>修饰的方法，强制要求子类重写，被<code>final</code>修饰的方法子类不能重写</li><li><code>private</code> ：被<code>abstract</code>修饰的方法，强制要求子类重写，被<code>private</code>修饰的方法子类不能重写</li><li><code>static</code>：被 <code>static</code>修饰的方法可以类名调用，类名调用抽象方法没有意义</li></ul></blockquote><h3 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h3><p><strong>接口介绍</strong></p><ul><li>接口：体现的思想是对规则的声明，Java 中的接口更多体现的事对行为的抽象</li><li>接口用关键字<code>interface</code>来定义 <ul><li><code>public interface 接口名{}</code></li></ul></li><li>接口不能实例化</li><li>接口和类之间是实现关系，通过<code>implements</code>关键字表示 <ul><li><code>public class 类名 implements 接口名{}</code></li></ul></li><li>接口的子类（实现类） <ul><li>1、重写所有抽象方法</li><li>2、将实现类变成抽象类</li></ul></li></ul><p><strong>接口中的成员特点</strong></p><ul><li>成员变量 <ul><li>只能是常量</li><li>默认修饰符：<code>public static final</code></li></ul></li><li>构造方法 <ul><li>没有</li></ul></li><li>成员方法 <ul><li>只能是抽象方法</li><li>默认修饰符：<code>public abstract</code></li><li>关于接口中的方法，<code>JDK8</code>和<code>JDK9</code>中有一些新特性</li></ul></li></ul><p><strong>类和接口之间的各种关系</strong></p><blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>1、类和类之间：继承关系，只支持单继承，不支持多继承，但是可以多层继承
2、类和接口之间：实现关系，可以单实现，也可以多实现，还可以单继承多实现
3、接口和接口之间：继承关系，支持单继承，不支持多继承，可以多层继承
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>抽象类和接口的对比</strong></p><ul><li>成员变量 <ul><li>抽象类：可以定义变量，也可以定义常量</li><li>接口：只能定义常量</li></ul></li><li>成员方法 <ul><li>抽象类：可以是定义具体方法，也可以定义抽象方法</li><li>接口：只能定义抽象方法</li></ul></li><li>构造方法 <ul><li>抽象类：有</li><li>接口：没有</li></ul></li></ul><blockquote><p>抽象类和接口的对比</p><ul><li>抽象类：对事物做抽象（描述事物）</li><li>接口：对行为抽象（制定规则）</li></ul></blockquote><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h3><p><strong>同一个行为具有多个不同表现形式或形态的能力</strong></p><blockquote><p><strong>多态的成员访问特点</strong></p><ul><li>成员变量：编译看左边（父亲），运行看左边（父亲）</li><li>成员方法：编译看左边（父类），运行看右边（子类）</li></ul></blockquote><blockquote><p>编译的时候，会检查父类中有没有这个方法</p><ul><li>没有：编译出错</li><li>有，编译通过，但是运行的时候，一定会执行子类的方法逻辑</li></ul><p>原因：担心你调用的方法，在父类中是一个抽象方法</p></blockquote><blockquote><p><strong>多态的好处与弊端</strong></p><ul><li>多态的好处：提高了程序的扩展性 <ul><li>对象多态：将方法的形参定义为父类类型，这个方法可以接收父类的任意子类对象</li></ul></li><li>多态的弊端：不能使用子类的特有成员</li></ul></blockquote><blockquote><p><strong>多态中的转型</strong></p><ul><li>向上转型 <ul><li>从子到父（父类引用指向子类对象）</li></ul></li><li>向下转型 <ul><li>从父到子（将父类引用所指向的对象，转交给子类类型）</li></ul></li></ul><figure><img src="`+o+'" alt="多态" tabindex="0" loading="lazy"><figcaption>多态</figcaption></figure></blockquote><blockquote><p><strong>多态中的转型问题</strong></p><ul><li>关键字 instanceof</li><li>使用格式 <ul><li>对象名 instanceof 类型</li><li>判断一个对象是否是一个类的实例</li><li>通俗的理解：判断关键字左边的对象，是否是右边的类型，返回 boolean 类型结果</li></ul></li></ul></blockquote><h3 id="接口新特性" tabindex="-1"><a class="header-anchor" href="#接口新特性"><span>接口新特性</span></a></h3><ul><li>JDK8 的新特性：接口中可以定义有方法体的方法。（默认、静态）</li><li>JDK9 的新特性：接口中可以定义私有方法。</li></ul><figure><img src="'+l+`" alt="接口新特性" tabindex="0" loading="lazy"><figcaption>接口新特性</figcaption></figure><blockquote><p><strong><span style="background-color:red;color:#fff;">JDK8 接口特性</span></strong></p><p>1、允许在接口中定义非抽象方法，但是需要使用关键字 default 修饰，这些方法都是默认方法</p><ul><li><p>作用：<span style="color:red;">解决接口升级的问题</span></p></li><li><p>接口中默认方法的定义格式：</p><ul><li>格式：<code>public default 返回值类型 方法名（参数列表）{}</code></li><li>范例：<code>public default void show(){}</code></li></ul></li><li><p>注意事项：</p><ul><li><p>1、public 可以省略，但是 default 不能省略</p></li><li><p>2、默认方法，实现类是允许重写的，但是需要去掉 default 关键字</p></li><li><p>3、如果实现了多个接口，多个接口存在相同的方法声明，子类就必须对该方法进行重写</p></li></ul></li></ul><p>2、允许定义静态方法</p><ul><li>理解：既然接口以及允许方法带有方法体了，干脆也放开静态方法，可以类名调用</li><li>注意事项： <ul><li>1、<code>public</code>可以省略，但是<code>static</code>不能省略</li><li>2、接口中的静态方法，只允许接口名进行调用，不允许实现类通过对象调用</li></ul></li></ul></blockquote><blockquote><p><strong><span style="background-color:red;color:#fff;">JDK9 接口特性</span></strong></p><p>接口中允许定义私有方法</p><p>接口中私有方法的定义格式：</p><ul><li><p>格式 1：<code>private 返回值类型 方法名（参数列表）{}</code></p></li><li><p>范例 1：<code>private void show（）{}</code></p></li><li><p>格式 2：<code>private static 返回值类型 方法名（参数列表）{}</code></p></li><li><p>范例 2：<code>private static void show（）{}</code></p></li></ul></blockquote><h3 id="代码块" tabindex="-1"><a class="header-anchor" href="#代码块"><span>代码块</span></a></h3><p>**使用 { } 括起来的代码被称为代码块 **</p><p>分类：</p><ul><li>局部代码块 <ul><li>位置：方法中的一对大括号</li><li>作用：限定变量的生命周期，提早的释放内存</li></ul></li><li>构造代码块 <ul><li>位置：类中方法外的一对大括号</li><li>特点：在创建对象时，执行构造方法的时候，就会执行构造代码块（优先于构造方法执行）</li><li>作用：将多个构造方法中，重复的代码，抽取到构造代码块中，从而提升代码的复用性</li></ul></li><li>静态代码块、 <ul><li>位置：类中方法外的一对大括号，需要加入 static 关键字</li><li>特点:随着类的加载面执行，因为类只加载一次。所以也就只执行一次</li><li>作用:对数据进行初始化</li></ul></li><li>同步代码块</li></ul><h3 id="内部类" tabindex="-1"><a class="header-anchor" href="#内部类"><span>内部类</span></a></h3><ul><li><p>内部类就是定义在一个类里面的类</p></li><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建对象的格式</p></li><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>格式：外部类名。内部类名 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 外部类对象<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> 内部类对象<span class="token punctuation">(</span><span class="token punctuation">)</span>
范例<span class="token operator">:</span> <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> in  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>成员访问细节：</p><ul><li>1、内部类中，访问外部类成员：直接访问，包括私有</li><li>2、外部类中访问内部类成员：需要创建对象访问</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token comment">// 30</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 20</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 10</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>内部类的分类</p><ul><li><p>成员内部类</p></li><li><p>静态内部类</p><ul><li><p>有 static 修饰的成员内部类</p></li><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>静态内部类创建对象的格式：</p></li><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>格式：外部类名<span class="token punctuation">.</span>内部类名 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 外部类名<span class="token punctuation">.</span>内部类对象<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
范例：<span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>注意：静态只能访问静态</p></li></ul></li><li><p>局部内部类</p><ul><li>放在方法、代码块、构造器等执行体中</li></ul></li><li><p>匿名内部类</p></li></ul></blockquote><blockquote><p><strong>匿名内部类</strong></p><p>概述:匿名内部类本质上是一个特殊的局部内部类(定义在方法内部)</p><p>前提:需要存在一个接口或类</p><p>格式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">new</span> 类名 <span class="token operator">/</span> 接口 <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span>代表继承这个类
<span class="token keyword">new</span> 接口名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span>代表实现这个接口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论：可以让代码变得更加简洁，在定义类的时候对其进行实例化</p><p>问题：方法的形参是接口类型，我们该传入的是什么？</p><p>答案：传入的是该接口的实现类对象</p></blockquote><h3 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式"><span>Lambda 表达式</span></a></h3><ul><li>Lambda 表达式是 JDK8 开始后的一种新语法形式</li><li><span style="color:red;font-weight:600;">作用：简化匿名内部类的代码写法</span></li></ul><p><strong>Lambda 表达式的简化格式</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token punctuation">(</span>匿名内部类被重写方法的形参列表<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
    被重写方法的方法体代码
<span class="token punctuation">}</span>
注：<span class="token operator">=</span><span class="token operator">&gt;</span>是语法形式，无实际含义
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Lambda 表达式，只允许操作函数式编程接口：有，且仅有一个抽象方法的接口</p></blockquote><h4 id="lambda-表达式的省略写法" tabindex="-1"><a class="header-anchor" href="#lambda-表达式的省略写法"><span>Lambda 表达式的省略写法</span></a></h4><ul><li>参数类型可以省略不写</li><li>如果只有一个参数，参数类型可以省略，同时（）也可以省略</li><li>如果 Lambda 表达式的方法体代码只有一行代码。可以省略大括号不写，同时要省略分号！</li><li>如果 Lambda 表达式的方法体代码只有一行代码。可以省略大括号不写。 <ul><li>此时，如果这行代码是 return 语句，必须省略 return 不写，同事也必须省略<code>&quot;;&quot;</code>不写</li></ul></li></ul><h4 id="lambda-表达式和匿名内部类的区别" tabindex="-1"><a class="header-anchor" href="#lambda-表达式和匿名内部类的区别"><span>Lambda 表达式和匿名内部类的区别</span></a></h4><blockquote><p>使用限制不同</p><ul><li>匿名内部类：可以操作类，接口</li><li>Lambda 表达式：只能操作函数式接口</li></ul><p>实现原理不同</p><ul><li>匿名内部类：编译之后，产生一恶搞单独的.class 字节码文件</li><li>Lambda 表达式：编译之后，没有一个单独的.class 字节码文件</li></ul></blockquote><h3 id="窗体、组件、事件" tabindex="-1"><a class="header-anchor" href="#窗体、组件、事件"><span>窗体、组件、事件</span></a></h3><h4 id="窗体对象-jframe" tabindex="-1"><a class="header-anchor" href="#窗体对象-jframe"><span>窗体对象 JFrame</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 创建 JFrame 对象</span>
<span class="token class-name">JFrame</span> jf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置 JFrame 标题</span>
jf<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;JFrame 窗口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置 JFrame 宽高</span>
jf<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置 JFrame 关闭时的操作</span>
jf<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span><span class="token constant">EXIT_ON_CLOSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置窗体的标题</span>
jf<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;我的第一个 JFrame 窗口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置 JFrame 可见</span>
jf<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h4><blockquote><p>1.窗体对象.setLayout(null); 取消默认布局</p><p>2.创建组件对象</p><p>3.组件对象.setBounds(x,y.width.height);设置摆放位置</p><p>4.窗体对象.getContentPane().add(组件对象)</p></blockquote><p><strong>JLabel 组件</strong></p><ul><li>用于展示文本和图片</li><li>JLabel（String text）使用指定的文本创建一个 JLabel 对象</li><li>JLabel（Icon image）创建一恶搞具有指定图像的 JLable 对象</li></ul><p><strong>注：如果多个组件摆放在同一个位置，后添加的组件，会被压在底部</strong></p><h4 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h4><figure><img src="`+c+'" alt="事件" tabindex="0" loading="lazy"><figcaption>事件</figcaption></figure><figure><img src="'+i+'" alt="事件2" tabindex="0" loading="lazy"><figcaption>事件2</figcaption></figure><blockquote><p>焦点：程序的注意力集中在了某一个组件上</p></blockquote><blockquote><p>注意：按钮组件比较特殊，在创建好之后，程序的焦点，默认就停留在按钮组件上面</p><ul><li>但按钮组件，其实不需要占用程序的焦点</li><li>可以通过 <code>setFocusable(false)</code> 取消焦点</li></ul></blockquote><h3 id="适配器设计模式" tabindex="-1"><a class="header-anchor" href="#适配器设计模式"><span>适配器设计模式</span></a></h3><ul><li>设计模式(Design pattern)是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。<br> 使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。</li><li>适配器设计模式:解决接口与接口实现类之间的矛盾问题</li></ul><figure><img src="'+u+`" alt="适配器设计模式" tabindex="0" loading="lazy"><figcaption>适配器设计模式</figcaption></figure><ul><li>实现步骤 <ul><li>1.编写一个 <code>xxxAdapter</code> 类，实现对应接口</li><li>2.重写内部所有抽象方法，但方法都是空实现</li><li>3.让自己的类去继承适配器类，重写自己需要的方法即可</li><li>4.为了避免其他类创建适配器类的对象，使用 <code>abstract</code> 进行修饰</li></ul></li></ul><h3 id="模版设计模式" tabindex="-1"><a class="header-anchor" href="#模版设计模式"><span>模版设计模式</span></a></h3><ul><li>模板设计模式:把抽象类整体就可以看做成一个模板，模板中不能决定的东西定义成抽象方法让使用模板的类(继承抽象类的类)去重写抽象方法实现需求</li></ul><h2 id="常用-api" tabindex="-1"><a class="header-anchor" href="#常用-api"><span>常用 API</span></a></h2><h3 id="第一天" tabindex="-1"><a class="header-anchor" href="#第一天"><span>第一天</span></a></h3><h4 id="object-类" tabindex="-1"><a class="header-anchor" href="#object-类"><span>Object 类</span></a></h4><blockquote><ul><li>所有的类，都直接或者间接的继承了 Object 类</li><li>Object 类的方法是一切子类都可以直接使用的</li></ul></blockquote><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public String toString()</code></td><td>默认是返回当前对象在对内存中的地址信息：类的全类名@十六进制哈希值</td></tr></tbody></table><ul><li>开发中直接输出对象，默认输出对象的地址其实是毫无意义的。</li><li>开发中输出对象变量，更多的时候是希望看到对象的内容数据而不是对象的地址信息。</li></ul><p><strong>toString 存在的意义</strong></p><ul><li>父类 tostring()方法存在的意义就是为了被子类重写，以便返回对象的内容信息，而不是地址信息!!</li></ul><h4 id="objects-的常见方法" tabindex="-1"><a class="header-anchor" href="#objects-的常见方法"><span>Objects 的常见方法：</span></a></h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public static boolean equals(Object a,Object b)</code></td><td>比较两个对象的，底层会先进行非空判断，从而可以避免空指针异常。再进行 equals 比较</td></tr><tr><td><code>public static boolean isNull(Object obj)</code></td><td>判断变量是否为 null</td></tr></tbody></table><h4 id="math-类" tabindex="-1"><a class="header-anchor" href="#math-类"><span>Math 类</span></a></h4><ul><li>包含执行基本数字运算的方法</li></ul><blockquote><ul><li><code>public static int abs(int a)</code>:获取参数绝对值</li><li><code>public static double ceil(double a)</code>:向上取整</li><li><code>public static double floor(double a)</code>:向下取整</li><li><code>public static int round(float a)</code>:四舍五入</li><li><code>public static int max(int a,int b)</code>:获取两个 int 值中的较大值</li><li><code>public static double pow(double a,double b)</code>: 返回 a 的 b 次幂的值</li><li><code>public static double random()</code>:返回值为 double 的随机值，范围[0.0,1.0)</li></ul></blockquote><h4 id="system-类" tabindex="-1"><a class="header-anchor" href="#system-类"><span>System 类</span></a></h4><ul><li>System 的功能是静态的，都是直接用类名调用即可</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public static void exit(int status)</code></td><td>终止当前运行的 Java 虚拟机，非零表示异常终止</td></tr><tr><td><code>public static long currentTimeMillis()</code></td><td>返回当前系统的时间毫秒值形式</td></tr><tr><td><code>public static void arraycopy(数据源数组，起始索引，目的地数组，其实索引，拷贝个数)</code></td><td>数组拷贝</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> destArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> destArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> destArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>destArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//22</span>
<span class="token comment">//33</span>
<span class="token comment">//44</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bigdecimal-类" tabindex="-1"><a class="header-anchor" href="#bigdecimal-类"><span>BigDecimal 类</span></a></h4><ul><li>用于解决小数运算中，出现的不精确问题</li></ul><blockquote><p><strong>创建对象</strong></p><ul><li><code>public BigDecimal(double val)</code></li><li><span style="color:red;"><code>public BigDecimal(String val)</code></span></li><li><span style="color:red;"><code>public static BigDecimal valueOf(double val)</code></span></li></ul></blockquote><blockquote><p><strong>常用成员方法</strong></p><ul><li><code>public BigDecimal add(BigDecimal b)</code>:加法</li><li><code>public BigDecimal subtract(aigDecimal b)</code>:减法</li><li><code>public BigDecimal multiply(BigDecimal b)</code>:派法</li><li><code>public BigDecimal divide(BigDecimal b)</code>:除法</li><li><code>public gigDecimal divide(另一个Bigpecinal对象，精确几位，舍入模式)</code>:除法</li></ul></blockquote><blockquote><p>注意：如果使用 BigDecimal 运算，出现了除不尽的情况，就</p></blockquote><h4 id="包装类" tabindex="-1"><a class="header-anchor" href="#包装类"><span>包装类</span></a></h4><ul><li>将<strong>基本数据类型</strong>，包装成<strong>类</strong>（变成引用数据类型）</li></ul><table><thead><tr><th>基本数据类型</th><th>引用数据类型</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td><span style="color:red;">Integer</span></td></tr><tr><td>long</td><td>Long</td></tr><tr><td>char</td><td><span style="color:red;">Character</span></td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><p><strong>Integer 类</strong></p><ul><li>将基本数据类型，手动包装为类</li><li><code>public Integer(int value)</code></li><li><code>public static Integer valueOf(int i)</code></li><li><code>public static string toBinaryString(int i)</code>:转二进制</li><li><code>public static string toOctalString(int i)</code>:转几进制</li><li><code>public static string toHexString(int i)</code>:转十六进制</li><li><code>public static int parseInt(string s)</code>:将数字字符串，转换为数字</li></ul><p><strong>面试题</strong></p><figure><img src="`+r+'" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><h3 id="第二天" tabindex="-1"><a class="header-anchor" href="#第二天"><span>第二天</span></a></h3><h4 id="arrays-类" tabindex="-1"><a class="header-anchor" href="#arrays-类"><span>Arrays 类</span></a></h4><p><strong>Arrays 类介绍</strong></p><ul><li>数组操作工具类，专门用于操作数组元素</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public static String toString(类型[] a)</code></td><td>将数组元素拼接为带有格式的字符串</td></tr><tr><td><code>public static boolean equals(类型[] a, 类型[] b)</code></td><td>比较两个数组内容是否相同</td></tr><tr><td><code>public static int binarySearch(int[] a,int key)</code></td><td>查找元素在数组中的索引（二分查找法）</td></tr><tr><td><code>public static void sort(类型[] a)</code></td><td>对数组进行默认升序排列</td></tr></tbody></table><h4 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序"><span>冒泡排序</span></a></h4><ul><li>相邻的两个数进行比较，如果第一个比第二个大，就交换他们两个</li></ul><figure><img src="'+k+`" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 冒泡排序</span>
<span class="token comment">// 外循环:比较的轮数</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 内循环：比较的次数</span>
    <span class="token comment">// -1：避免索引越界</span>
    <span class="token comment">// -i:提高效率</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//希望的是arr[j] &lt; arr[j+1]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//交换arr[j]与arr[j+1]</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序"><span>选择排序</span></a></h4><ul><li>从 0 索引开始，拿着每一个索引上的元素跟后面的元素依次比较</li></ul><figure><img src="`+d+`" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [11, 22, 33, 44, 55]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找"><span>二分查找</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//默认的首索引</span>
<span class="token keyword">int</span> end <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 尾部边界下标初始值</span>

<span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 判断是否找到了指定的元素</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> arr2<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;找到了&quot;</span> <span class="token operator">+</span> target <span class="token operator">+</span> <span class="token string">&quot;,对应的位置为：&quot;</span> <span class="token operator">+</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&gt;</span> arr2<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        head <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        end <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;未找到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序"><span>快速排序</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;排序之前：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token function">quickSort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用实现快排的方法</span>

		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\n排序之后：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">subSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">int</span> base <span class="token operator">=</span> data<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> low <span class="token operator">=</span> start<span class="token punctuation">;</span>
			<span class="token keyword">int</span> high <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span><span class="token operator">++</span>low<span class="token punctuation">]</span> <span class="token operator">-</span> base <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
					<span class="token punctuation">;</span>
				<span class="token keyword">while</span> <span class="token punctuation">(</span>high <span class="token operator">&gt;</span> start <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span><span class="token operator">--</span>high<span class="token punctuation">]</span> <span class="token operator">-</span> base <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
					<span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token comment">//交换data数组[low]与[high]位置的元素</span>
					<span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			<span class="token comment">//交换data数组[start]与[high]位置的元素</span>
			<span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">//经过代码[start, high)部分的元素 比[high, end]都小</span>

			<span class="token comment">//通过递归调用，对data数组[start, high-1]部分的元素重复刚才的过程</span>
			<span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> high <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//通过递归调用，对data数组[high+1,end]部分的元素重复刚才的过程</span>
			<span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span> temp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h4><figure><img src="`+m+'" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><blockquote><p>String telRegex = &quot;编写规则&quot;</p><p>&quot;需要做校验的字符串&quot;.matches(telRegex)</p></blockquote><h4 id="string-类中与正则有关的常见方法" tabindex="-1"><a class="header-anchor" href="#string-类中与正则有关的常见方法"><span>String 类中与正则有关的常见方法</span></a></h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public String replaceAll(String regex,String newStr)</code></td><td>按照正则表达式匹配的内容进行替换</td></tr><tr><td><code>public String[] split(String regex)</code></td><td>按照正则表达式匹配的内容进行分割字符串，返回一个字符串数组</td></tr></tbody></table><figure><img src="'+v+'" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><h3 id="第三天" tabindex="-1"><a class="header-anchor" href="#第三天"><span>第三天</span></a></h3><h4 id="时间-api" tabindex="-1"><a class="header-anchor" href="#时间-api"><span>时间 API</span></a></h4><p><strong>JDK8（-）时间类</strong></p><blockquote><p><strong>Date 类</strong></p><ul><li>代表的是日期和时间</li></ul><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td><code>public Date()</code></td><td>创建一个 Date 对象，代表的是系统当前此刻日期时间</td></tr><tr><td><code>public Date(Long time)</code></td><td>把时间毫秒值转换成 Date 日期对象</td></tr></tbody></table><table><thead><tr><th>常见方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public long getTime()</code></td><td>返回从 970 年 1 月 1 日 00:00:00 走到此刻的总的毫秒数</td></tr><tr><td><code>public void setTime(long time)</code></td><td>设置日期对象的时间为当前时间毫秒值对应的时间</td></tr></tbody></table></blockquote><blockquote><p><strong>SimpleDateFormat 类</strong></p><figure><img src="'+b+`" alt="SimpleDateFormat" tabindex="0" loading="lazy"><figcaption>SimpleDateFormat</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> date <span class="token operator">=</span> <span class="token string">&quot;1999-12-24&quot;</span>

<span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Fri Dec 24 00:00:00 CST 1999</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>总结</strong></p><p>1、日期对象如何创建，如何获取时间毫秒值？</p><ul><li><code>public Date()</code></li><li><code>public long getTime()</code></li></ul><p>2、时间毫秒值怎么转化成日期对象？</p><ul><li><code>public Date(long time)</code></li><li><code>public void setTime(long time)</code></li></ul><p>3、SimpleDateFormat 代表什么，有什么作用？</p><ul><li>可以把日期对象格式化成我们想要的形式</li><li>可以把字符串的时间形式解析成 Date 日期对象</li></ul><p>4、SimpleDateFormat 的对象如何创建？</p><ul><li><code>punlic SimpleDateFormat(String pattern)</code></li></ul><p>5、SimpleDateFormat 格式化，以及解析时间的方法是哪些？</p><ul><li><code>public final String format(Date d)</code>：格式化日期对象</li><li><code>public Date parse(String source)</code>：解析字符串时间</li></ul></blockquote><h4 id="calendar-类介绍" tabindex="-1"><a class="header-anchor" href="#calendar-类介绍"><span>Calendar 类介绍</span></a></h4><ul><li>代表的是系统此刻时间对应的日历，通过它可以单独获取、修改时间中的年、月、日、时、分、秒等。</li></ul><blockquote><p>创建对象：</p><ul><li><code>public static Calendar.getInstance()</code>：获取当前时间的目历对象</li></ul><p>常用方法:</p><ul><li><code>public int get(int field)</code>:取日历中的某个字段信息</li><li><code>public void set(int field,int value)</code>:修改日历的某个字段信息</li><li><code>public void add(int field,int amount)</code>:为某个字段增加/减少指定的值</li><li><code>public final Date getTime()</code>：获取日期对象</li><li><code>public final setTime(Date date)</code>：给日历设置日期对象</li></ul></blockquote><figure><img src="`+g+'" alt="区别" tabindex="0" loading="lazy"><figcaption>区别</figcaption></figure><figure><img src="'+h+'" alt="JDK8版本后时间API" tabindex="0" loading="lazy"><figcaption>JDK8版本后时间API</figcaption></figure><blockquote><p>日历类</p><ul><li><code>LocalDate</code>：年、月、日</li><li><code>LocalTime</code>：时、分、秒</li><li><code>LocalDateTime</code>：年、月、日</li></ul></blockquote><blockquote><p>日期格式化类</p><ul><li><code>DateTimeFormatter</code>：用于时间的格式化和解析</li></ul></blockquote><blockquote><p>时间类</p><ul><li><code>Instant</code>：时间戳\\时间线</li><li><code>ZoneId</code>：时区</li><li><code>ZonedDateTime</code>：带时区的时间</li></ul></blockquote><blockquote><p>工具类</p><ul><li><code>Period</code>：时间间隔（年、月、日）</li><li><code>Duration</code>：时间间隔（时、分、秒、纳秒）</li><li><code>ChronoUnit</code>：时间间隔（所有单位）</li></ul></blockquote><figure><img src="'+f+'" alt="LocalDate" tabindex="0" loading="lazy"><figcaption>LocalDate</figcaption></figure><blockquote><p><strong>修改年月日时分秒相关的方法</strong></p><ul><li>LocalDateTime、LocalDate、LocaTime 都是不可变的，下列方法返回的是一恶搞新的对象<br><img src="'+y+'" alt="修改年月日时分秒相关的方法" loading="lazy"></li></ul></blockquote><h4 id="dateformatter-类" tabindex="-1"><a class="header-anchor" href="#dateformatter-类"><span>DateFormatter 类</span></a></h4><ul><li>用于时间的格式化和解析</li></ul><figure><img src="'+E+`" alt="DateFormatter" tabindex="0" loading="lazy"><figcaption>DateFormatter</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LocalDateTime</span> nowDate <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;格式化之前：&quot;</span> <span class="token operator">+</span> nowDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 格式化之前：2024-04-23T11:24:35.121747</span>

<span class="token comment">// 获取格式化对象</span>
<span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy年MM月dd日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> result <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>nowDate<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;格式化之后：&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 格式化之后：2024年04月23日</span>

<span class="token comment">// 解析</span>
<span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token string">&quot;2024年04月23日&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">LocalDate</span> par <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>par<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2024-04-23</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="instant-类" tabindex="-1"><a class="header-anchor" href="#instant-类"><span>Instant 类</span></a></h4><blockquote><figure><img src="`+q+`" alt="Instant" tabindex="0" loading="lazy"><figcaption>Instant</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 获取当前时间</span>
<span class="token class-name">Instant</span> now <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取东八区的时间戳</span>
<span class="token class-name">ZonedDateTime</span> zonedDateTime <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Asia/Shanghai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>ZoneId 类</strong></p><p>常见方法：</p><ul><li><code>static Set&lt;String&gt; getAvailableZoneIds()</code>：获取 Java 中支持的所有时区</li><li><code>static ZoneId systemDefault()</code>：获取系统默认时区</li><li><code>static ZoneId of(String zoneId)</code>：获取一个指定时区</li></ul></blockquote><h4 id="duration、period、chronounit" tabindex="-1"><a class="header-anchor" href="#duration、period、chronounit"><span>Duration、Period、ChronoUnit</span></a></h4><blockquote><p>Duration：用于计算两个“时间”间隔（秒，纳秒）</p><p>Period：用于计算两个“日期”间隔（年月日）</p><p>ChronoUnit：用于计算两个“日期间隔”</p></blockquote><h2 id="递归、异常" tabindex="-1"><a class="header-anchor" href="#递归、异常"><span>递归、异常</span></a></h2><h3 id="递归介绍和使用" tabindex="-1"><a class="header-anchor" href="#递归介绍和使用"><span>递归介绍和使用</span></a></h3><p><strong>递归介绍</strong></p><ul><li>方法直接或间接调用本身 <ul><li><strong>注：递归如果没有控制好终止，会出现递归死循环，导致栈内存溢出现象</strong></li></ul></li></ul><h3 id="异常介绍" tabindex="-1"><a class="header-anchor" href="#异常介绍"><span>异常介绍</span></a></h3><p><strong>异常介绍</strong></p><ul><li>指的是程序在编译或执行过程中，出现的非正常的情况（错误）</li></ul><p><strong>异常体系</strong></p><figure><img src="`+w+`" alt="异常体系" tabindex="0" loading="lazy"><figcaption>异常体系</figcaption></figure><blockquote><p>Error</p><ul><li>严重级别问题 <ul><li>常见的：栈内存溢出（StackOverflowError） 堆内存溢出（OutOfMemoryError）</li></ul></li></ul></blockquote><blockquote><p>Exception</p><ul><li>RunTimeException 及其子类：运行时异常</li><li>除 RunTimeException 之外所有的异常：编译时异常 <ul><li>需要再运行之前，给出解决方案</li></ul></li></ul></blockquote><blockquote><p><strong>运行时异常</strong></p><p>数组索引越界异常：<code>ArrayIndexOutOfBoundsException</code></p><p>空指针异常：<code>NullPointerException</code></p><p>数学操作异常：<code>ArithmeticException</code></p><p>类型转换异常：<code>ClassCastException</code></p><p>数字转换异常：<code>NumberFormatException</code></p></blockquote><h3 id="异常处理方式" tabindex="-1"><a class="header-anchor" href="#异常处理方式"><span>异常处理方式</span></a></h3><p><strong>异常的默认处理流程</strong></p><ul><li>① 虚拟机会在出现异常的代码那里自动的创建一个异常对象</li><li>② 异常会从方法中出现的点这里抛出给调用者，调用者最终抛出给 IVM 虚拟机</li><li>③ 虚拟机接收到异常对象后，先在控制台直接输出异常信息数据</li><li>④ 终止 Java 程序的运行</li><li>⑤ 后续代码没有机会执行了，因为程序已经噶了</li></ul><blockquote><p>1.try...catch 捕获异常</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>好处：异常对象可以被捕获，后续代码继续执行
格式：
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        可能会出现异常的代码
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
        异常的处理方案
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.throws 抛出异常</p><hr><p>问题：正在面临的异常，是否需要暴露出来</p><ul><li>不需要暴露：try...catch 捕获</li><li>需要暴露：抛出异常</li></ul></blockquote><h3 id="自定义异常" tabindex="-1"><a class="header-anchor" href="#自定义异常"><span>自定义异常</span></a></h3><ul><li>Java 无法为这个世界上全部的问题提供异常类。</li><li>如果企业想通过异常的方式来管理自己的某个业务问题，就需要自定义异常类了。</li></ul><h4 id="自定义异常的分类" tabindex="-1"><a class="header-anchor" href="#自定义异常的分类"><span><strong>自定义异常的分类</strong></span></a></h4><ul><li>1、自定义编译时异常 <ul><li>定义一个异常类继承 Exception</li><li>重写构造器</li></ul></li><li>2、自定义运行时异常 <ul><li>定义一个异常类继承 RuntimeException</li><li>重写构造器</li></ul></li></ul><h4 id="异常的细节" tabindex="-1"><a class="header-anchor" href="#异常的细节"><span>异常的细节</span></a></h4><ul><li>Throwable 的常用方法：</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public String getMessage()</code></td><td>获取异常的错误原因</td></tr><tr><td><code>public void printStackTrace</code></td><td>展示完整的异常错误信息</td></tr></tbody></table><ul><li>子类重写父类方法时，不能抛出父类没有的异常，或者比父类更大的异常</li></ul><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h2><figure><img src="`+x+'" alt="集合" tabindex="0" loading="lazy"><figcaption>集合</figcaption></figure><h3 id="单列集合" tabindex="-1"><a class="header-anchor" href="#单列集合"><span>单列集合</span></a></h3><figure><img src="'+n+`" alt="单列集合" tabindex="0" loading="lazy"><figcaption>单列集合</figcaption></figure><h3 id="collection-的使用" tabindex="-1"><a class="header-anchor" href="#collection-的使用"><span>Collection 的使用</span></a></h3><p>Collecttion 的使用</p><table><thead><tr><th style="text-align:left;">方法名称</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>public boolean add(E e)</code></td><td>把给定的对象添加到当前集合中</td></tr><tr><td style="text-align:left;"><code>public void clear()</code></td><td>清空集合中所有的元素</td></tr><tr><td style="text-align:left;"><code>public boolean remove(E e)</code></td><td>把给定的对象在当前集合中删除</td></tr><tr><td style="text-align:left;"><code>public boolean contains(Object obj)</code></td><td>判断当前集合中是否包含给定的对象</td></tr><tr><td style="text-align:left;"><code>public boolean isEmpty</code></td><td>判断当前集合是否为空</td></tr><tr><td style="text-align:left;"><code>public int size()</code></td><td>返回集合中元素的个数/集合的长度</td></tr></tbody></table><h3 id="集合的通用遍历方式" tabindex="-1"><a class="header-anchor" href="#集合的通用遍历方式"><span>集合的通用遍历方式</span></a></h3><ul><li>迭代器</li><li>增强 for 循环</li><li>forEach 方法</li></ul><blockquote><p><strong>迭代器</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 获取迭代器</span>
<span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 循环判断，集合中是否还有元素</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Student</span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hashNext()</code>：判断集合中是否还有元素</p><p><code>next()</code>：取出集合元素，饼将指针向后移动</p><p>注意：在循环过程中 next 方法最好只调用一次</p></blockquote><blockquote><p><strong>增强 for 循环</strong></p><ul><li>简化迭代器的代码书写</li><li>它是 JDK5 之后出现的，其内部原理就是一个 Iterator 迭代器</li></ul><figure><img src="`+B+`" alt="增强for循环" tabindex="0" loading="lazy"><figcaption>增强for循环</figcaption></figure></blockquote><blockquote><p><strong>forEach 方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>default void forEach(Consumer&lt;? super T&gt; action)</code></td><td>遍历集合</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> c<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>forEach 的底层就是增强 for 循环</p></blockquote><h3 id="list-接口" tabindex="-1"><a class="header-anchor" href="#list-接口"><span>List 接口</span></a></h3><figure><img src="`+S+`" alt="list接口" tabindex="0" loading="lazy"><figcaption>list接口</figcaption></figure><blockquote><p>并发修改异常</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>使用【迭代器】遍历集合的过程中，调用了【集合对象】的添加，删除方法，就会出现此异常
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>解决方案：迭代器的遍历过程中，不允许使用集合对象的添加或删除，那就使用迭代器，自己的添加或删除方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h3 id="arraylist-类和-linklist-类" tabindex="-1"><a class="header-anchor" href="#arraylist-类和-linklist-类"><span>ArrayList 类和 LinkList 类</span></a></h3><ul><li>ArrayList 底层是基于数组实现的，根据查询元素快，增删相对慢</li></ul><p><strong>ArrayList 长度可变原理</strong></p><ul><li>① 使用空参构造器床架的集合，在底层创建一个默认长度为 0 的数组</li><li>② 添加第一个元素时，底层会创建一个新的长度为 10 的数组</li><li>③ 存满时，会扩容 1.5 倍</li></ul><p><strong>LinkedList 类</strong></p><figure><img src="`+A+'" alt="LinkedList类" tabindex="0" loading="lazy"><figcaption>LinkedList类</figcaption></figure><h3 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h3><p><strong>泛型介绍</strong></p><ul><li>JDK5 引入的，可以在编译阶段约束操作的数据类型，并进行检查</li></ul><figure><img src="'+j+`" alt="泛型" tabindex="0" loading="lazy"><figcaption>泛型</figcaption></figure><ul><li>泛型的好处： <ul><li>统一数据类型</li><li>将运行期的错误提升到了编译期</li></ul></li></ul><p><strong>泛型的学习路径：</strong></p><blockquote><p><strong>注意：泛型中只能编写引用数据类型</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>常见的泛型标识符：<span class="token class-name">E</span> <span class="token class-name">V</span> <span class="token class-name">K</span> <span class="token class-name">T</span>
<span class="token class-name">E</span> <span class="token operator">-</span> <span class="token class-name">Element</span> <span class="token punctuation">(</span>在集合中使用，因为集合中存放的是元素<span class="token punctuation">)</span>
<span class="token class-name">V</span> <span class="token operator">-</span> <span class="token class-name">Value</span> <span class="token punctuation">(</span>表示具体类型的值<span class="token punctuation">)</span>
<span class="token class-name">K</span> <span class="token operator">-</span> <span class="token class-name">Key</span> <span class="token punctuation">(</span>在<span class="token class-name">Map</span>集合中使用，因为<span class="token class-name">Map</span>集合中存放的是键值对<span class="token punctuation">)</span>
<span class="token class-name">T</span> <span class="token operator">-</span> <span class="token class-name">Type</span> <span class="token punctuation">(</span>表示具体类型<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ul><li>泛型类</li><li>泛型方法 <ul><li>1、非静态的方法：内部的泛型，会根据类的泛型去匹配</li><li>2、静态的方法：静态方法中如果加入了泛型，必须声明出自己独立的泛型 <ul><li>时机：在调用方法，传入实际参数的时候，确定到具体的类型</li></ul></li></ul></li><li>泛型接口 <ul><li>1、实现类，实现接口的时候确定到具体的类型</li><li>2、实现类实现接口，没有指定具体类型，就让接口的泛型，跟着类的泛型去匹配</li></ul></li><li>泛型通配符 <ul><li><code>？</code>：任意类型。</li><li><code>？ extends E </code>：可以传入的是 E，或者是 E 的子类。</li><li><code>？super E</code> ：可以传入的是 E，或者是 E 的父类。</li></ul></li><li>泛型的限定</li></ul><h3 id="treeset-集合" tabindex="-1"><a class="header-anchor" href="#treeset-集合"><span>TreeSet 集合</span></a></h3><ul><li>作用：对集合中的元素进行排序操作(底层红黑树实现)</li></ul><h4 id="treeset-排序" tabindex="-1"><a class="header-anchor" href="#treeset-排序"><span>TreeSet 排序</span></a></h4><p>1、类实现 Comparable 接口</p><p>2、重写 compareTo 方法</p><p>3、根据方法的返回值，来组织排序规则</p><ul><li>负数：左边走</li><li>正数：右边走</li><li>0：不存</li></ul><figure><img src="`+F+'" alt="TreeSet自然排序" tabindex="0" loading="lazy"><figcaption>TreeSet自然排序</figcaption></figure><figure><img src="'+C+'" alt="TreeSet比较器排序" tabindex="0" loading="lazy"><figcaption>TreeSet比较器排序</figcaption></figure><h3 id="hashset-集合类" tabindex="-1"><a class="header-anchor" href="#hashset-集合类"><span>HashSet 集合类</span></a></h3><h4 id="hashset-介绍" tabindex="-1"><a class="header-anchor" href="#hashset-介绍"><span>HashSet 介绍</span></a></h4><ul><li>HashSet 集合底层采取哈希表存储数据</li><li>哈希表是一种对于增删改查数据性能都比较好的结构</li></ul><blockquote><p>HashSet：保证元素唯一性</p><p>需要同事重写对象中的 hashCode 方法和 equlas 方法</p></blockquote><blockquote><p>hashCode 方法和 equals 方法的配合流程</p><ul><li>当添加对象的时候，会先调用对象的 hashCode 方法计算出一个应该存入的索引位置，查看该位置上是否存在元素 <ul><li>不存在：直接存</li><li>存在：调用 equals 方法比较内容 <ul><li>false：存</li><li>true：不存</li></ul></li></ul></li></ul></blockquote><blockquote><p>hashCode 方法介绍</p><figure><img src="'+_+'" alt="hashCode方法" tabindex="0" loading="lazy"><figcaption>hashCode方法</figcaption></figure></blockquote><blockquote><p><strong>HashSet 的添加过程</strong></p><ul><li>底层结构：<strong>哈希表<span style="color:red;">（数组、链表、红黑树的结合体）</span></strong></li><li>① 创建 HashSet 集合，内部会存在一个长度为 16 个大小的数组，数组名为 table</li><li>② 调用集合的添加方法，会拿着对象的 hashCode 方法计算出存入的索引位置<span style="color:red;">(哈希值%数组长度)</span></li><li><img src="'+D+'" alt="HashCode方法02" tabindex="0" loading="lazy"><figcaption>HashCode方法02</figcaption></li><li>③ 判断当前位置是否为 null，如果是 null 直接存入，如果位置不为 null，表示有元素，则调用 equals 方法比较属性值，如果一样，则不存，如果不一样，则存入数组</li><li>当数组存满到 16*0.75 = 12 时，就自动扩容，每次扩容原先的两倍</li></ul></blockquote><blockquote><p><strong>如何能够提高查询性能？</strong></p><figure><img src="'+z+'" alt="提高查询性能" tabindex="0" loading="lazy"><figcaption>提高查询性能</figcaption></figure></blockquote><h3 id="linkedhashset-集合类" tabindex="-1"><a class="header-anchor" href="#linkedhashset-集合类"><span>LinkedHashSet 集合类</span></a></h3><ul><li>有序、不重复、无索引</li><li>原理：底层数据结构依然是哈希表，只是每个元素又额外的多了一个双链表的机制记录存储的顺序</li></ul><figure><img src="'+n+'" alt="单列集合" tabindex="0" loading="lazy"><figcaption>单列集合</figcaption></figure><blockquote><p>1、如果想要集合中的元素可重复</p><ul><li>用于<code>ArrayList</code>集合，基于数组的</li></ul><p>2、如果想要集合中的元素可重复，而且当前的<span style="color:red;">增删操作明显多于查询</span></p><ul><li>用<code>LinkedList</code>集合，基于链表的</li></ul><p>3、如果想对集合中的元素去重</p><ul><li>用<code>HashSet</code>集合，基于哈希表的</li></ul><p>4、如果想对集合中的元素去重，而且保证存取顺序</p><ul><li>用<code>LinkedHashSet</code>集合，基于哈希表和双链表，效率低于<code>HashSet</code></li></ul></blockquote><h3 id="collections-集合工具类" tabindex="-1"><a class="header-anchor" href="#collections-集合工具类"><span>Collections 集合工具类</span></a></h3><h4 id="可变参数" tabindex="-1"><a class="header-anchor" href="#可变参数"><span>可变参数</span></a></h4><ul><li><p>可变参数用在形参中可以接收多个数据</p></li><li><p>可变参数的格式：<strong>数据类型...参数名称</strong></p></li><li><p>传输参数非常灵活，方便，可以不传输参数，可以传输 1 个或者多个，也可以传输一个数组</p></li><li><p><span style="color:red;"><strong>可变参数在方法内部本质上就是一个数组</strong></span></p></li></ul><p><strong>注意事项：</strong></p><p>1、一个形参列表中可变参数只能有一个</p><p>2、可变参数必须放在形参列表的最后面</p><h4 id="collections-集合工具类-1" tabindex="-1"><a class="header-anchor" href="#collections-集合工具类-1"><span>Collections 集合工具类</span></a></h4><ul><li>java.utils.Collections：是集合工具类</li><li><span style="color:red;">作用：Collections 并不属于集合，是用来操作集合的工具类</span></li></ul><figure><img src="'+I+`" alt="Collections集合工具类" tabindex="0" loading="lazy"><figcaption>Collections集合工具类</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 二分查找</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 洗牌</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 最大值</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 最小值</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 交换</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//[a, b, c, d]</span>
<span class="token comment">//2</span>
<span class="token comment">//[d, b, c, a]</span>
<span class="token comment">//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
<span class="token comment">//9</span>
<span class="token comment">//1</span>
<span class="token comment">//[4, 2, 3, 1, 5, 6, 7, 8, 9]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map-接口" tabindex="-1"><a class="header-anchor" href="#map-接口"><span>Map 接口</span></a></h3><figure><img src="`+T+'" alt="Map接口" tabindex="0" loading="lazy"><figcaption>Map接口</figcaption></figure><h4 id="map-的常见-api" tabindex="-1"><a class="header-anchor" href="#map-的常见-api"><span>Map 的常见 API</span></a></h4><ul><li>Map 是双列集合的顶层接口，它的功能是全部双列集合都可以继承使用的</li></ul><figure><img src="'+L+'" alt="Map的常用API" tabindex="0" loading="lazy"><figcaption>Map的常用API</figcaption></figure><blockquote><p>双列集合底层的数据结构，都是针对于键有效，跟值没有关系</p><ul><li>HashMap：键唯一（重写 hashcode 和 equals 方法）</li><li>TreeMap：键有序（实现 CompareTo 接口，重写 compareTo 方法）</li><li>LinkedHashMap：键唯一，且可以保证存取有序</li></ul></blockquote><figure><img src="'+O+'" alt="Map接口特点" tabindex="0" loading="lazy"><figcaption>Map接口特点</figcaption></figure><h3 id="map-集合的遍历方式" tabindex="-1"><a class="header-anchor" href="#map-集合的遍历方式"><span>Map 集合的遍历方式</span></a></h3><figure><img src="'+P+'" alt="Map集合的三种遍历方式" tabindex="0" loading="lazy"><figcaption>Map集合的三种遍历方式</figcaption></figure><blockquote><figure><img src="'+J+`" alt="通过键找值" tabindex="0" loading="lazy"><figcaption>通过键找值</figcaption></figure><ul><li>调用 keySet 方法获取所有的键（得到的是 Set 集合）</li><li>遍历 Set 集合，获取每一个键</li><li>遍历的过程中调用 get 方法，根据键找值</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 添加元素</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;赵六&quot;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出Map集合对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取到所有的键</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keySet<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 遍历所有的键</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 获取到对应的值</span>
   <span class="token class-name">Integer</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><figure><img src="`+M+`" alt="通过键值对对象获取键和值" tabindex="0" loading="lazy"><figcaption>通过键值对对象获取键和值</figcaption></figure><ul><li>调用 entrySet 方法获取所有的键值对对象（得到的是 Set 结合）</li><li>遍历 Set 集合，获取每一个键值对对象</li><li>通过键值对对象的<code>getKey()</code> <code>getValue()</code>获取键和值</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加元素</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;赵六&quot;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> entrySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 获取到所有的键</span>
   <span class="token class-name">String</span> key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 获取到对应的值</span>
   <span class="token class-name">Integer</span> value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><figure><img src="`+N+`" alt="通过forEach方法遍历" tabindex="0" loading="lazy"><figcaption>通过forEach方法遍历</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加元素</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;赵六&quot;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// forEach方法</span>
map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;-----&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h2><ul><li>数据结构是计算机底层存储、组织数据的方式，是指数据相互之间是以什么方式排列在一起的</li><li>通常情况下，精心设计的数据结构可以带来更高的运行或者存储效率</li></ul><p>常见的数据结构</p><ul><li>栈</li><li>队列</li><li>数组</li><li>链表</li><li>二叉树</li><li>二叉查找树</li><li>平衡二叉树</li><li>红黑树</li><li>哈希表</li></ul><blockquote><p><strong>栈、队列</strong></p><figure><img src="`+H+'" alt="栈、队列" tabindex="0" loading="lazy"><figcaption>栈、队列</figcaption></figure></blockquote><blockquote><p><strong>数组</strong></p><figure><img src="'+K+'" alt="数组结构" tabindex="0" loading="lazy"><figcaption>数组结构</figcaption></figure></blockquote><blockquote><p><strong>链表</strong></p><figure><img src="'+R+'" alt="链表1" tabindex="0" loading="lazy"><figcaption>链表1</figcaption></figure><figure><img src="'+U+'" alt="链表2" tabindex="0" loading="lazy"><figcaption>链表2</figcaption></figure></blockquote><blockquote><p>树</p><p><strong>二叉查找树</strong></p><figure><img src="'+Z+'" alt="二叉查找树" tabindex="0" loading="lazy"><figcaption>二叉查找树</figcaption></figure></blockquote><blockquote><p>平衡二叉树</p><figure><img src="'+W+'" alt="平衡二叉树" tabindex="0" loading="lazy"><figcaption>平衡二叉树</figcaption></figure></blockquote><blockquote><p>红黑树</p><ul><li>红黑树是一种自平衡的二叉查找树，是计算机科学中用到的一种数据结构。</li><li>1972 年出现，当时被称之为平衡二叉 B 树。后来，1978 年被修改为如今的&quot;红黑树&quot;。</li><li>它是一种特殊的二叉查找树，红黑树的每一个节点上都有存储位表示节点的颜色</li><li>每一个节点可以是红或者黑;红黑树不是高度平衡的，它的平衡是通过&quot;红黑规则&quot;进行实现的</li></ul><figure><img src="'+V+'" alt="红黑树" tabindex="0" loading="lazy"><figcaption>红黑树</figcaption></figure><table><thead><tr><th>平衡二叉树</th><th>红黑树</th></tr></thead><tbody><tr><td>高度平衡</td><td>是一个二叉查找树</td></tr><tr><td>当左右子树高度差超过 1 时，通过旋转保持平衡</td><td>但是不是高度平衡</td></tr><tr><td></td><td>条件：特有的红黑规则</td></tr></tbody></table><p><strong>红黑规则</strong></p><ul><li>每一个节点是红色的，或者是黑色的</li><li>根节点必须是黑色</li><li>如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为 NiL，这些 Nil 视为叶节点，每个叶节点(Nil)是黑色的</li><li>如果某一个节点是红色，那么它的子节点必须是黑色(不能出现两个红色节点相连的情况)</li><li>对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点;</li></ul><p><strong>添加节点的规则</strong></p><figure><img src="'+X+'" alt="红黑树添加节点规则" tabindex="0" loading="lazy"><figcaption>红黑树添加节点规则</figcaption></figure></blockquote><h2 id="stream-流-file-类" tabindex="-1"><a class="header-anchor" href="#stream-流-file-类"><span>Stream 流 File 类</span></a></h2><h3 id="stream-流" tabindex="-1"><a class="header-anchor" href="#stream-流"><span>Stream 流</span></a></h3><blockquote><p><strong>Stream 流介绍</strong></p><ul><li>配合 Lambda 表达式，简化集合和数组操作</li></ul></blockquote><figure><img src="'+Q+'" alt="Stream流思想" tabindex="0" loading="lazy"><figcaption>Stream流思想</figcaption></figure><h4 id="stream-流对象" tabindex="-1"><a class="header-anchor" href="#stream-流对象"><span>Stream 流对象</span></a></h4><ul><li><p>集合获取 Stream 流对象(使用 Collection 接口中的默认方法)</p><ul><li><code>default Stream&lt;E&gt; stream()</code></li><li>Map 集合获取 Stream 流对象，需要间接获取 <ul><li><code>map.entrySet().stream()</code></li></ul></li></ul></li><li><p>数组获取 Stream 流对象（使用 Arrays 数组工具类中的静态方法）</p><ul><li><code>static &lt;T&gt; Stream&lt;T&gt; stream (T[] array)</code></li></ul></li><li><p>零散的数据获取 Stream 流对象（使用 Stream 类中的静态方法）</p><ul><li><code>static &lt;T&gt; Stream&lt;T&gt; of(T... values)</code></li></ul></li></ul><h4 id="stream-流中间操作方法" tabindex="-1"><a class="header-anchor" href="#stream-流中间操作方法"><span>Stream 流中间操作方法</span></a></h4><figure><img src="'+G+'" alt="Stream流中间操作方法" tabindex="0" loading="lazy"><figcaption>Stream流中间操作方法</figcaption></figure><ul><li><strong>中间方法调用完成后返回新的 Stream 流可以继续使用，支持链式编程</strong></li></ul><p><strong>注意事项：流对象已经被消费过了（使用过），就不允许再次消费了。</strong></p><h4 id="stream-流终结操作方法" tabindex="-1"><a class="header-anchor" href="#stream-流终结操作方法"><span>Stream 流终结操作方法</span></a></h4><figure><img src="'+Y+'" alt="Stream流终结操作方法" tabindex="0" loading="lazy"><figcaption>Stream流终结操作方法</figcaption></figure><h4 id="stream-收集操作" tabindex="-1"><a class="header-anchor" href="#stream-收集操作"><span>Stream 收集操作</span></a></h4><ul><li>把 Stream 流操作后的结果数据转回到集合</li></ul><figure><img src="'+$+`" alt="Stream流收集" tabindex="0" loading="lazy"><figcaption>Stream流收集</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Collectors 工具类提供了具体的收集方法</li></ul><figure><img src="`+nn+`" alt="Collector工具类" tabindex="0" loading="lazy"><figcaption>Collector工具类</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">/*
    现在有两个 ArrayLiSt 患合。分别存储6名男演员和6名女演员。求完成如下的操作:
        1。男演员只婴名字为3个字的前两人
        2。女演员只要姓林的，并且不要第一个
        3。把过滤后的男演员姓名和女演员姓名合并到一起
        4。把上一步操作后的元素作为构造方法的参数创建演员对象，遍历数据
        5，演员类Actor，里面有一个成员变量，一个带参构适方法，以及成员变对应的get/set方法
     */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> manList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    manList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;周润发&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    manList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;成龙&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    manList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;周星驰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    manList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;李连杰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    manList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;吴京&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    manList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;刘德华&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> womanList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    womanList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;林心如&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    womanList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;林青霞&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    womanList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;张曼玉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    womanList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;柳岩&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    womanList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;林志玲&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    womanList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;王祖贤&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> manStream <span class="token operator">=</span> manList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> womanStream <span class="token operator">=</span> womanList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;林&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> actorStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>manStream<span class="token punctuation">,</span> womanStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Actor</span><span class="token punctuation">&gt;</span></span> actorList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    actorStream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> actorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    actorList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Stream 流操作，不会修改数据源</li></ul><h3 id="file-类" tabindex="-1"><a class="header-anchor" href="#file-类"><span>File 类</span></a></h3><ul><li>File 类代表操作系统的文件对象（文件、文件夹）</li></ul><h4 id="file-类创建对象" tabindex="-1"><a class="header-anchor" href="#file-类创建对象"><span>File 类创建对象</span></a></h4><figure><img src="`+sn+`" alt="File类创建对象" tabindex="0" loading="lazy"><figcaption>File类创建对象</figcaption></figure><ul><li>File 对象可以定位文件和文件夹</li><li>File 封装的对象仅仅是一个路径名，这个路径可以是存在的，也可以是不存在的</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Learn\\\\123.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Learn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Learn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f3<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> f4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Learn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;123.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f4<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="相对路径和绝对路径" tabindex="-1"><a class="header-anchor" href="#相对路径和绝对路径"><span>相对路径和绝对路径</span></a></h4><ul><li>绝对路径:从盘符根目录开始，一直到某个具体的文件或文件夹</li><li>相对路径:相对于当前项目</li></ul><h4 id="file-类中的常用方法" tabindex="-1"><a class="header-anchor" href="#file-类中的常用方法"><span>File 类中的常用方法</span></a></h4><figure><img src="`+an+'" alt="File类中的常用方法" tabindex="0" loading="lazy"><figcaption>File类中的常用方法</figcaption></figure><h4 id="file-类的创建和删除方法" tabindex="-1"><a class="header-anchor" href="#file-类的创建和删除方法"><span>File 类的创建和删除方法</span></a></h4><figure><img src="'+tn+'" alt="File类的创建和删除方法" tabindex="0" loading="lazy"><figcaption>File类的创建和删除方法</figcaption></figure><h4 id="file-类的遍历方法" tabindex="-1"><a class="header-anchor" href="#file-类的遍历方法"><span>File 类的遍历方法</span></a></h4><figure><img src="'+pn+`" alt="File类的遍历方法" tabindex="0" loading="lazy"><figcaption>File类的遍历方法</figcaption></figure><ul><li>当调用者 File 表示的路径不存在时，返回 null</li><li>当调用者 File 表示的路径是文件时，返回 nul</li><li>当调用者 File 表示的路径是一个空文件夹时，返回一个长度为 0 的数组</li><li>当调用者 File 表示的路径是需要权限才能访问的文件夹时，返回 null</li></ul><h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例：</span></a></h4><p>键盘录入一个文件夹路径，统计文件夹中每种文件的个数并打印(考子文件夹)</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token class-name">FileTest1</span><span class="token punctuation">.</span><span class="token function">getDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">countFile</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>suffix <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">&quot;个&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">countFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 判断当前文件是否含有.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nameList <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 获取文件的后缀名</span>
                    <span class="token class-name">String</span> suffix <span class="token operator">=</span> nameList<span class="token punctuation">[</span>nameList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">countFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="io" tabindex="-1"><a class="header-anchor" href="#io"><span>IO</span></a></h2><h3 id="io-流体系结构" tabindex="-1"><a class="header-anchor" href="#io-流体系结构"><span>IO 流体系结构</span></a></h3><figure><img src="`+en+'" alt="IO流体系结构" tabindex="0" loading="lazy"><figcaption>IO流体系结构</figcaption></figure><h3 id="fileoutputstream-字节输出流" tabindex="-1"><a class="header-anchor" href="#fileoutputstream-字节输出流"><span>FileOutputStream 字节输出流</span></a></h3><figure><img src="'+on+'" alt="FileOutputStream字节输出流" tabindex="0" loading="lazy"><figcaption>FileOutputStream字节输出流</figcaption></figure><ul><li>流对象使用完毕后，记得调用 close 方法关闭，不然会占用资源</li></ul><h4 id="标准的关流代码" tabindex="-1"><a class="header-anchor" href="#标准的关流代码"><span>标准的关流代码</span></a></h4><figure><img src="'+ln+'" alt="标准的关流代码" tabindex="0" loading="lazy"><figcaption>标准的关流代码</figcaption></figure><blockquote><ul><li>字节输出流 FileOutputStream</li><li>创建对象的时候和文件建立关联</li><li>通过 write 方法写出数据 <ul><li>写出单个字节</li><li>写出一个字节数组</li><li>写出字节数组的一部分</li></ul></li><li>最后记得关流释放资源</li></ul></blockquote><h3 id="fileinputstream-字节输入流" tabindex="-1"><a class="header-anchor" href="#fileinputstream-字节输入流"><span>FileInputStream 字节输入流</span></a></h3><figure><img src="'+cn+'" alt="FileInputStream字节输入流" tabindex="0" loading="lazy"><figcaption>FileInputStream字节输入流</figcaption></figure><figure><img src="'+un+`" alt="FileInputStream字节输入流1" tabindex="0" loading="lazy"><figcaption>FileInputStream字节输入流1</figcaption></figure><blockquote><p>FileInputStream 字节输入流</p><p>创建对象的时候关联文件，文件不存在就会抛出异常</p><p>调用 read 方法读取字节</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Learn\\\\test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Learn\\\\test1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 读写操作</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字节缓冲流" tabindex="-1"><a class="header-anchor" href="#字节缓冲流"><span>字节缓冲流</span></a></h3><ul><li>字节缓冲流在源代码中内置了字节数组，可以提高读写效率</li></ul><figure><img src="`+rn+'" alt="字节缓冲流" tabindex="0" loading="lazy"><figcaption>字节缓冲流</figcaption></figure><figure><img src="'+kn+'" alt="字节缓冲流读写过程" tabindex="0" loading="lazy"><figcaption>字节缓冲流读写过程</figcaption></figure><h3 id="filereader-字符输入流" tabindex="-1"><a class="header-anchor" href="#filereader-字符输入流"><span>FileReader 字符输入流</span></a></h3><ul><li>用于读取纯文本文件，解决中文乱码问题</li></ul><figure><img src="'+dn+'" alt="FileReader字符输入流" tabindex="0" loading="lazy"><figcaption>FileReader字符输入流</figcaption></figure><h4 id="字符集-字符编码" tabindex="-1"><a class="header-anchor" href="#字符集-字符编码"><span>字符集，字符编码</span></a></h4><ul><li><p>字符集：是指多个字符的集合</p></li><li><p>字符编码：字符编码是指一种映射规则</p><ul><li>根据这个规则可以将某个字符映射成其他形式的数据以便在计算机中存储和传输</li></ul></li></ul><h4 id="编码和解码" tabindex="-1"><a class="header-anchor" href="#编码和解码"><span>编码和解码</span></a></h4><ul><li>编码：字符转字节</li></ul><figure><img src="'+mn+'" alt="编码" tabindex="0" loading="lazy"><figcaption>编码</figcaption></figure><ul><li>解码：字节转字符</li></ul><figure><img src="'+vn+'" alt="解码" tabindex="0" loading="lazy"><figcaption>解码</figcaption></figure><h3 id="filewriter-字符输出流" tabindex="-1"><a class="header-anchor" href="#filewriter-字符输出流"><span>FileWriter 字符输出流</span></a></h3><figure><img src="'+bn+'" alt="FileWriter字符输出流" tabindex="0" loading="lazy"><figcaption>FileWriter字符输出流</figcaption></figure><figure><img src="'+gn+'" alt="FileWriter字符输出流1" tabindex="0" loading="lazy"><figcaption>FileWriter字符输出流1</figcaption></figure><blockquote><p>注意事项：</p><ul><li>字符输出流写出数据，需要调用 flush 或 close 方法，数据才会写出</li></ul><p>Flush 后可以继续写出</p><p>Close 后不能继续写出</p></blockquote><blockquote><p>字符流使用场景：读写纯文本文件</p><p>字节流使用场景：不是纯文本文件都用字节流</p></blockquote><h3 id="字符缓冲流" tabindex="-1"><a class="header-anchor" href="#字符缓冲流"><span>字符缓冲流</span></a></h3><figure><img src="'+hn+'" alt="字符缓冲流的构造方法" tabindex="0" loading="lazy"><figcaption>字符缓冲流的构造方法</figcaption></figure><figure><img src="'+fn+`" alt="特有方法" tabindex="0" loading="lazy"><figcaption>特有方法</figcaption></figure><blockquote><p>1、缓冲流有几种？</p><ul><li>字节缓冲输入流：BufferedInputStream</li><li>字节缓冲输出流：BufferedOutputStream</li><li>字符缓冲输入流：BufferedReader</li><li>字符缓冲输出流：BufferedWriter</li></ul><p>2、缓冲流为什么能提高性能？</p><ul><li>缓冲流自带长度为 8192 的缓冲区</li><li>可以显著提高字节流的读写性能</li><li>对于字符流提升不明显，对于字符缓冲流而言关键点是两个特有的方法</li></ul><p>3、字符缓冲流两个特有的方法是什么？</p><ul><li>字符缓冲输入流<code>BufferedReader:readLine()</code></li><li>字符缓冲输出流<code>BufferedWriter:newLine()</code></li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> readCount <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>readCount <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;0&quot;</span> <span class="token operator">:</span> readCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;欢迎使用本软件,第&quot;</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">&quot;次使用免费~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;不软件只能免费使用3次,欢迎您注册会员后继续使用~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转换流" tabindex="-1"><a class="header-anchor" href="#转换流"><span>转换流</span></a></h3><ul><li>1、转换流的名字是什么？ <ul><li>字符转换输入流：InputStreamReader</li><li>字符转换输出流：OutputStreamWriter</li></ul></li><li>2、转换流的作用是什么？ <ul><li>指定字符集读写数据(JDK11 之后已淘汰)</li><li>字节流想要使用字符流中的方法了</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// JDK11以前的版本</span>
<span class="token class-name">InputStreamReader</span> fsr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;c.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;GBK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">OutputStreamWriter</span> fsw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;d.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> b<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fsr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fsw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

fsr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fsw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// JDK11以后的版本</span>
<span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;c.txt&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;GBK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> b<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列化流" tabindex="-1"><a class="header-anchor" href="#序列化流"><span>序列化流</span></a></h3><figure><img src="`+yn+'" alt="序列化流" tabindex="0" loading="lazy"><figcaption>序列化流</figcaption></figure><blockquote><p>可以把 Java 中的对象写到本地文件中</p></blockquote><figure><img src="'+En+`" alt="序列化流方法" tabindex="0" loading="lazy"><figcaption>序列化流方法</figcaption></figure><blockquote><p>使用对象输出流将对象保存到文件时会出现 NotserializableException 异常</p><p>解决方案:需要让 Javabean 类实现 Serializable 接口</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Serializable 接口里面是没有抽象方法的，标记型接口
 * 一旦实现这个接口，那么就表示当前的Student类可以被序列化
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="反序列化流-对象操作输入流" tabindex="-1"><a class="header-anchor" href="#反序列化流-对象操作输入流"><span>反序列化流 / 对象操作输入流</span></a></h4><figure><img src="`+qn+`" alt="反序列化流" tabindex="0" loading="lazy"><figcaption>反序列化流</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Object</span> o <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>序列化流和反序列化流的细节汇总</p><ul><li>使用序列化流将对象写到文件时，需要让 Javabean 类实现 Serializable 接口否则，会出现 NotserializableException 异常</li><li>序列化流写到文件中的数据是不能修改的，一旦修改就无法再次读回来了</li><li>序列化对象后，修改了 Javabean 类，再次反序列化，会不会有问题? <ul><li>会出问题，会抛出 InvalidclassException 异常</li><li>解决方案:给 lavabean 类添加 serialVersionUID(列号、版本号)</li></ul></li><li>如果一个对象中的某个成员变量的值不想被序列化，又该如何实现呢? <ul><li>解决方案:给该成员变量加 transient 关键字修饰，该关键字标记的成员变量不参与序列化过程</li></ul></li></ul></blockquote><h3 id="打印流" tabindex="-1"><a class="header-anchor" href="#打印流"><span>打印流</span></a></h3><figure><img src="`+wn+'" alt="打印流" tabindex="0" loading="lazy"><figcaption>打印流</figcaption></figure><blockquote><p>分类：打印流一般是指：printStream，printWriter 两个类</p><p>特点 1：打印流只操作文件目的地，不操作数据源</p><p>特点 2:特有的写出方法可以实现，数据原样写出</p><ul><li>例如:打印:97 文件中:97</li><li>打印:true 文件中:true</li></ul><p>特点 3:特有的写出方法，可以实现自动刷新，自动换行</p></blockquote><h4 id="字节打印流" tabindex="-1"><a class="header-anchor" href="#字节打印流"><span>字节打印流</span></a></h4><figure><img src="'+xn+'" alt="字节打印流" tabindex="0" loading="lazy"><figcaption>字节打印流</figcaption></figure><figure><img src="'+Bn+`" alt="字节打印流成员方法" tabindex="0" loading="lazy"><figcaption>字节打印流成员方法</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;e.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ps<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符打印流" tabindex="-1"><a class="header-anchor" href="#字符打印流"><span>字符打印流</span></a></h4><figure><img src="`+Sn+'" alt="字符打印流" tabindex="0" loading="lazy"><figcaption>字符打印流</figcaption></figure><figure><img src="'+An+'" alt="字符打印流构造方法" tabindex="0" loading="lazy"><figcaption>字符打印流构造方法</figcaption></figure><figure><img src="'+jn+`" alt="字符打印流成员方法" tabindex="0" loading="lazy"><figcaption>字符打印流成员方法</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;f.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;你红红火火恍恍惚惚哈哈哈&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pw<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;你好你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>1、打印流有几种？各有什么特点？</p><ul><li>有字节打印流和字符打印流两种</li><li>打印流不操作数据源，只能操作目的地</li><li>字节打印流：默认自动刷新，特有的 println 自动换行</li><li>字符打印流：自动刷新需要开启，特有的 println 自动换行</li></ul></blockquote><h3 id="解压缩流-压缩流" tabindex="-1"><a class="header-anchor" href="#解压缩流-压缩流"><span>解压缩流/压缩流</span></a></h3><figure><img src="`+Fn+`" alt="解压缩流和压缩流" tabindex="0" loading="lazy"><figcaption>解压缩流和压缩流</figcaption></figure><h4 id="解压缩流" tabindex="-1"><a class="header-anchor" href="#解压缩流"><span>解压缩流</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 要解压的压缩包文件</span>
    <span class="token class-name">File</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Learn\\\\JAVA\\\\Advanced-Codes\\\\day14-code\\\\src\\\\com\\\\itheima\\\\image.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 解压后存放的目录</span>
    <span class="token class-name">File</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Learn\\\\JAVA\\\\Advanced-Codes\\\\day14-code\\\\src\\\\com\\\\itheima\\\\zipStream\\\\&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">unzip</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unzip</span><span class="token punctuation">(</span><span class="token class-name">File</span> src<span class="token punctuation">,</span> <span class="token class-name">File</span> dest<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">ZipInputStream</span> zip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ZipEntry</span> nextEntry<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nextEntry <span class="token operator">=</span> zip<span class="token punctuation">.</span><span class="token function">getNextEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 判断当前项是一个文件还是文件夹</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextEntry<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 文件夹</span>
            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> nextEntry<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 文件</span>
            <span class="token comment">// 如果扫描的第一个是文件，但是没有文件夹，则新增对应文件夹</span>
            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> nextEntry<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                file<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> nextEntry<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> zip<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            zip<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    zip<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="压缩文件" tabindex="-1"><a class="header-anchor" href="#压缩文件"><span>压缩文件</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将根目录的a.txt文件压缩</span>

    <span class="token class-name">File</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Learn\\\\JAVA\\\\Advanced-Codes\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">File</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Learn\\\\JAVA\\\\Advanced-Codes\\\\&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">zipFile</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> <span class="token string">&quot;a.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">zipFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> src<span class="token punctuation">,</span> <span class="token class-name">File</span> dest<span class="token punctuation">,</span> <span class="token class-name">String</span> zipFileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.创建压缩流关联压缩包</span>
    <span class="token class-name">ZipOutputStream</span> zos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> zipFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.创建zipEntry对象，表示压缩包里面的每一个文件和文件夹</span>
    <span class="token comment">//参数:压缩包里面的路径</span>
    <span class="token class-name">ZipEntry</span> zipEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3.把zipEntry对象放到压缩包当中</span>
    zos<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span>zipEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//4.把src文件中的数据写到压缩包当中</span>
    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        zos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    zos<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    zos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="压缩文件夹" tabindex="-1"><a class="header-anchor" href="#压缩文件夹"><span>压缩文件夹</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 压缩一个文件夹及内部所有文件和文件夹</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//  1.创建File对象表示要压缩的文件夹</span>
    <span class="token class-name">File</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Learn\\\\JAVA\\\\Advanced-Codes\\\\day14-code\\\\src\\\\com\\\\itheima\\\\zipStream\\\\image&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//  2.创建File对象表示压缩包放在哪里(压缩包的父级路径)</span>
    <span class="token class-name">File</span> parentFile <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//  3.创建File对象表示压缩包的路径</span>
    <span class="token class-name">File</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parentFile<span class="token punctuation">,</span> src<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//  4.创建压缩流关联压缩包</span>
    <span class="token class-name">ZipOutputStream</span> zos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//  5.获取src里面的每一个文件，变成zipEntry对象，放入到压缩包当中</span>
    <span class="token function">toZip</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> zos<span class="token punctuation">,</span> src<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//  6.释放资源</span>
    zos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">toZip</span><span class="token punctuation">(</span><span class="token class-name">File</span> src<span class="token punctuation">,</span> <span class="token class-name">ZipOutputStream</span> zos<span class="token punctuation">,</span> <span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是文件，则放入到压缩包当中</span>
            <span class="token class-name">ZipEntry</span> zipEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>filePath <span class="token operator">+</span> <span class="token string">&quot;\\\\&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            zos<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span>zipEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 读取文件内容，写入到压缩包</span>
            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                zos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            zos<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是文件夹，则递归调用</span>
            <span class="token function">toZip</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> zos<span class="token punctuation">,</span> filePath <span class="token operator">+</span> <span class="token string">&quot;\\\\&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="commons-io" tabindex="-1"><a class="header-anchor" href="#commons-io"><span>Commons-io</span></a></h3><p>Commons-io 是 apache 开源基金组织提供的一组有关 I0 操作的开源工具包</p><figure><img src="`+Cn+'" alt="Commons-io常见方法" tabindex="0" loading="lazy"><figcaption>Commons-io常见方法</figcaption></figure><figure><img src="'+_n+'" alt="IOUtils类(流相关)" tabindex="0" loading="lazy"><figcaption>IOUtils类(流相关)</figcaption></figure><h3 id="hutool" tabindex="-1"><a class="header-anchor" href="#hutool"><span>HuTool</span></a></h3><figure><img src="'+Dn+'" alt="HuTool工具包" tabindex="0" loading="lazy"><figcaption>HuTool工具包</figcaption></figure><h2 id="properties-配制文件" tabindex="-1"><a class="header-anchor" href="#properties-配制文件"><span>properties 配制文件</span></a></h2><figure><img src="'+zn+'" alt="properties配制文件" tabindex="0" loading="lazy"><figcaption>properties配制文件</figcaption></figure><blockquote><p>properties 是一个双列集合集合，拥有 Map 集合所有的特点。<br> 重点：</p><ul><li>有一些特有的方法，可以把集合中的数据，按照键值对的形式写到配置文件当中</li><li>也可以把配置文件中的数据，读取到集合中来。</li></ul></blockquote><ul><li>Properties 作为双列集合的方法</li><li>Properties 中特有的读写方法</li></ul><h2 id="多线程-juc" tabindex="-1"><a class="header-anchor" href="#多线程-juc"><span>多线程&amp;JUC</span></a></h2><h3 id="进程和线程" tabindex="-1"><a class="header-anchor" href="#进程和线程"><span>进程和线程</span></a></h3><p>线程</p><p>线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</p><p>进程</p><p>进程是程序的基本执行实体</p><blockquote><ul><li><p>1.什么是多线程?有了多线程，我们就可以让程序同时做多件事情</p></li><li><p>2.多线程的作用?提高效率</p></li><li><p>3.多线程的应用场景?<br> 只要你想让多个事情同时运行就需要用到多线程比如:软件中的耗时操作、所有的聊天软件、所有的服务器</p></li></ul></blockquote><h3 id="多线程的两个概念" tabindex="-1"><a class="header-anchor" href="#多线程的两个概念"><span>多线程的两个概念</span></a></h3><p>并发和并行</p><blockquote><p>并发:在同一时刻，有多个指令在单个 CPU 上交替执行<br> 并行:在同一时刻，有多个指令在多个 CPU 上同时执行</p></blockquote><h3 id="多线程的实现方式" tabindex="-1"><a class="header-anchor" href="#多线程的实现方式"><span>多线程的实现方式</span></a></h3><figure><img src="'+In+`" alt="多线程的实现方式" tabindex="0" loading="lazy"><figcaption>多线程的实现方式</figcaption></figure><blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>多线程的第一种启动方式<span class="token operator">:</span>
<span class="token number">1.</span>自己定义一个类继承<span class="token class-name">Thread</span>
<span class="token number">2.</span>重写run方法
<span class="token number">3.</span>创建子类的对象，并启动线程
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>多线程的第二种启动方式<span class="token operator">:</span>
<span class="token number">1.</span>自己定义一个类实现<span class="token class-name">Runnable</span>接口
<span class="token number">2.</span>重写里面的run方法
<span class="token number">3.</span>创建自己的类的对象
<span class="token number">4.</span>创建一个<span class="token class-name">Thread</span>类的对象，并开启线程
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>多线程的第三种实现方式<span class="token operator">:</span>
特点<span class="token operator">:</span>可以获取到多线程运行的结果
   <span class="token number">1.</span>创建一个类<span class="token class-name">MyCallable</span>实现<span class="token class-name">Callable</span>按口
   <span class="token number">2.</span>重写call <span class="token punctuation">(</span>是有返回值的，表示多线程运行的结果<span class="token punctuation">)</span>
   <span class="token number">3.</span>创建<span class="token class-name">MyCallable</span>的对象<span class="token punctuation">(</span>表示多线程要执行的任务<span class="token punctuation">)</span>
   <span class="token number">4.</span>创建<span class="token class-name">FutureTask</span>的对象<span class="token punctuation">(</span>作用管理多线程运行的结果<span class="token punctuation">)</span>
   <span class="token number">5.</span>创建<span class="token class-name">Thread</span>类的对象，并启动<span class="token punctuation">(</span>表示线程<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><figure><img src="`+Tn+'" alt="多线程三张实现方式对比" tabindex="0" loading="lazy"><figcaption>多线程三张实现方式对比</figcaption></figure><h3 id="常见的成员方法" tabindex="-1"><a class="header-anchor" href="#常见的成员方法"><span>常见的成员方法</span></a></h3><figure><img src="'+Ln+'" alt="多线程常见的成员方法" tabindex="0" loading="lazy"><figcaption>多线程常见的成员方法</figcaption></figure><blockquote><p>当其他非守护线程执行完毕后，守护线程也没有存在的必要了，就会陆续结束</p><p>应用场景：聊天时传输文件，聊天为主线程：传输文件为守护线程</p></blockquote><h3 id="线程的生命周期" tabindex="-1"><a class="header-anchor" href="#线程的生命周期"><span>线程的生命周期</span></a></h3><figure><img src="'+On+`" alt="线程的生命周期" tabindex="0" loading="lazy"><figcaption>线程的生命周期</figcaption></figure><h3 id="线程安全的问题" tabindex="-1"><a class="header-anchor" href="#线程安全的问题"><span>线程安全的问题</span></a></h3><h4 id="同步代码块" tabindex="-1"><a class="header-anchor" href="#同步代码块"><span>同步代码块</span></a></h4><blockquote><p>把操作共享数据的代码锁起来</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">synchronized</span><span class="token punctuation">(</span>锁<span class="token punctuation">)</span><span class="token punctuation">{</span>
    操作共享数据的代码
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特点 1：锁默认打开，有一个线程进去了，锁自动关闭</p><p>特点 2：里面的代码全部执行完毕，线程出来，锁自动打开</p></blockquote><h4 id="同步方法" tabindex="-1"><a class="header-anchor" href="#同步方法"><span>同步方法</span></a></h4><blockquote><p>就是把 synchronized 关键字加到方法上</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>修饰符 <span class="token keyword">synchronized</span> 返回值类型 方法名（参数）<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>特点 1：同步方法是锁住方法里面所有的代码</p><p>特点 2:：锁对象不能自己指定</p><ul><li>非静态：this</li><li>静态：当前类的字节码文件对象</li></ul></blockquote><h3 id="lock-锁" tabindex="-1"><a class="header-anchor" href="#lock-锁"><span>Lock 锁</span></a></h3><blockquote><p>虽然我们可以理解同步代码块和同步方法的锁对象问题，</p><p>但是我们并没有直接看到在哪里加上了锁，在哪里释放了锁</p><p>为了更清晰的表达如何加锁和释放锁，JDK5 以后提供了一个新的锁对象 Lock<br> Lock 实现提供比使用 synchronized 方法和语句可以获得更广泛的锁定操作</p><p>Lock 中提供了获得锁和释放锁的方法</p><p>void lock():获得锁</p><p>void unlock():释放锁</p><p>Lock 是接口不能直接实例化，这里采用它的实现类 ReentrantLock 来实例化</p><p>ReentrantLock 的构造方法</p><p>ReentrantLock():创建一个 ReentrantLock 的实例</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ticket<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;正在卖第&quot;</span> <span class="token operator">+</span> ticket <span class="token operator">+</span> <span class="token string">&quot;张票&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h3><p>锁的嵌套</p><h3 id="生产者和消费者-等待唤醒机制" tabindex="-1"><a class="header-anchor" href="#生产者和消费者-等待唤醒机制"><span>生产者和消费者（等待唤醒机制）</span></a></h3><figure><img src="`+Pn+'" alt="阻塞队列的继承结构" tabindex="0" loading="lazy"><figcaption>阻塞队列的继承结构</figcaption></figure><h3 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池"><span>线程池</span></a></h3><figure><img src="'+Jn+'" alt="线程池方法" tabindex="0" loading="lazy"><figcaption>线程池方法</figcaption></figure><blockquote><p>线程池的主要核心思想</p><p>① 创建一个池子，池子中是空的</p><p>② 提交任务时，池子会创建新的线程对象，任务执行完毕，线程归还给池子下回再次提交任务时，不需要创建新的线程，直接复用已有的线程即可</p><p>③ 但是如果提交任务时，池子中没有空闲线程，也无法创建新的线程，任务就会排队等待</p></blockquote><blockquote><p><code>ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor</code></p><p>(核心线程数量,最大线程数量,空闲线程最大存活时间,任务队列,创建线程工厂,任务的拒绝策略);<br> 参数一:核心线程数最 不能小于 0<br> 参数二:最大线程数 不能小于等于 0，最大数量&gt;= 核心线程数量<br> 参数三:空闲线程最大存活时间 不能小于 0<br> 参数四:时间单位 用 TimeUnit 指定<br> 参数五:任务队列 不能为 nu11<br> 参数六:创建线程工厂 不能为 nu11<br> 参数七:任务的拒绝策略 不能为 nu11</p><figure><img src="'+Mn+'" alt="自定义线程池" tabindex="0" loading="lazy"><figcaption>自定义线程池</figcaption></figure></blockquote><h4 id="线程池多大合适" tabindex="-1"><a class="header-anchor" href="#线程池多大合适"><span>线程池多大合适？</span></a></h4><figure><img src="'+Nn+`" alt="线程池大小计算方法" tabindex="0" loading="lazy"><figcaption>线程池大小计算方法</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 向Java虚拟机返回可用处理器的数目</span>
<span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="网络编程" tabindex="-1"><a class="header-anchor" href="#网络编程"><span>网络编程</span></a></h2><h3 id="初识" tabindex="-1"><a class="header-anchor" href="#初识"><span>初识</span></a></h3><blockquote><p>1.什么网络编程?</p><p>计算机跟计算机之间通过网络进行数据传输</p><p>2.常见软件架构有哪些?</p><p>CS/BS</p><p>3.通信的软件架构 CS\\BS 的各有什么区别和优缺点</p><ul><li>C5:客户端服务端模式需要开发客户端</li><li>BS:浏览器服务端模式不需要开发客户端</li><li>CS:适合定制专业化的办公类软件如:IDEA、网游</li><li>BS:适合移动互联网应用，可以在任何地方随时访问的系统，</li></ul></blockquote><h3 id="网络编程三要素" tabindex="-1"><a class="header-anchor" href="#网络编程三要素"><span>网络编程三要素</span></a></h3><blockquote><p>1.网络编程三要素分别是什么?<br> IP、端口号、协议 2.网络编程三要素分别表示什么?<br> IP:设备在网络中的地址，是唯一的标识</p><p>端口号:应用程序在设备中唯一的标识。</p><p>协议:数据在网络中传输的规则</p><p>常见的协议有 UDP、TCP、http、https、ftp</p></blockquote><h4 id="ip" tabindex="-1"><a class="header-anchor" href="#ip"><span>IP</span></a></h4><p>全称:Internet Protocol，是互联网协议地址，也称 IP 地址。<br> 是分配给上网设备的数字标签。</p><p>通俗理解<br> 上网设备在网络中的地址，是唯一的</p><p>常见的 IP 分类为<br> IPv4、IPv6</p><blockquote><p>IPv4</p><p>全称:Internet Protocolversion4，互联网通信协议第四版</p><p>IPv6</p><p>全称:InternetProtocolversion6，互联网通信协议第六版。<br> 由于互联网的蓬勃发展，IP 地址的需求量愈来愈大，而 IPv4 的模式下 IP 的总数是有限的。<br> 采用 128 位地址长度，分成 8 组。</p></blockquote><blockquote><p>特殊 IP 地址</p><p>127.0.0.1，也可以是 localhost:是回送地址也称本地回环地址，也称本机 P，永远只会寻找当前所在本机。</p></blockquote><blockquote><p>常见的 CMD 命令</p><ul><li>ipconfig：查看本机 IP 地址</li><li>ping：检查网络是否连通</li></ul></blockquote><h5 id="inetaddress-的使用" tabindex="-1"><a class="header-anchor" href="#inetaddress-的使用"><span>InetAddress 的使用</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//获取IP对象</span>
<span class="token class-name">InetAddress</span> ipName <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ipName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InetAddress</span> ipName1 <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">&quot;DESKTOP-KDCBRDS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ipName1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> hostName <span class="token operator">=</span> ipName1<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> hostAddress <span class="token operator">=</span> ipName1<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hostAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>
<span class="token constant">DESKTOP</span><span class="token operator">-</span><span class="token constant">KDCBRDS</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.144</span>
<span class="token constant">DESKTOP</span><span class="token operator">-</span><span class="token constant">KDCBRDS</span>
<span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.144</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="端口号" tabindex="-1"><a class="header-anchor" href="#端口号"><span>端口号</span></a></h4><blockquote><p>应用程序在设备中唯一的标识。<br> 端口号:由两个字节表示的整数，取值范围:0~65535 其中 0~1023 之间的端口号用于一些知名的网络服务或者应用。我们自己使用 1024 以上的端口号就可以了，<br> 注意:一个端口号只能被一个应用程序使用，</p></blockquote><h4 id="协议" tabindex="-1"><a class="header-anchor" href="#协议"><span>协议</span></a></h4><figure><img src="`+Hn+'" alt="协议" tabindex="0" loading="lazy"><figcaption>协议</figcaption></figure><blockquote><p><strong>UDP 协议</strong></p><ul><li>用户数据报协议(User Datagram Protocol)</li><li>UDP 是面向无连接通信协议</li><li>速度快，有大小限制一次最多发送 64K，数据不安全，易丢失数据</li></ul></blockquote><blockquote><p><strong>TCP 协议</strong></p><ul><li>传输控制协议 TCP(Transmission Control Protocol)</li><li>TCP 协议是面向连接的通信协议。</li><li>速度慢，没有大小限制，数据安全，</li></ul></blockquote><h3 id="udp-通信程序" tabindex="-1"><a class="header-anchor" href="#udp-通信程序"><span>UDP 通信程序</span></a></h3><blockquote><p><strong>发送数据</strong></p><ul><li>找快递公司 创建发送端的<code>DatagramSocket</code>对象</li><li>打包礼物 数据打包<code>(DatagramPacket)</code></li><li>快递公司发送包裹 发送数据</li><li>付钱走人 释放资源</li></ul></blockquote><blockquote><p><strong>接收数据</strong></p><p>在接收的时候，一定要绑定端口</p><p>面且绑定的瑞口一定要跟发送的瑞口保持一致</p><ul><li>找快递公司 创建接收端的 DatagramSocket 对象</li><li>接收箱子 接收打包好的数据</li><li>从箱子里面获取礼物 解析数据包</li><li>签收走人 释放资源</li></ul></blockquote><p><strong>UDP 的三种通信方式</strong></p><figure><img src="'+Kn+`" alt="UDP的三种通信方式" tabindex="0" loading="lazy"><figcaption>UDP的三种通信方式</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 组播</span>
<span class="token class-name">MulticastSocket</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MulticastSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tcp-通信程序" tabindex="-1"><a class="header-anchor" href="#tcp-通信程序"><span>TCP 通信程序</span></a></h3><p>TCP 通信协议是一种可靠的网络协议，它在通信的两端各建立一个 Socket 对象</p><p>通信之前要保证连接已经建立</p><p>通过 Socket 产生 I0 流来进行网络通信</p><figure><img src="`+Rn+`" alt="TCP通信连接" tabindex="0" loading="lazy"><figcaption>TCP通信连接</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 模拟客户端</span>
<span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取输出流</span>
<span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;客户端发送数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 模拟服务端</span>
<span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听客户端的连接</span>
<span class="token class-name">Socket</span> accept <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取输入流</span>
<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> accept<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 关闭资源</span>
accept<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手"><span>三次握手</span></a></h4><figure><img src="`+Un+'" alt="TCP三次握手" tabindex="0" loading="lazy"><figcaption>TCP三次握手</figcaption></figure><h4 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手"><span>四次挥手</span></a></h4><figure><img src="'+Zn+'" alt="TCP四次挥手" tabindex="0" loading="lazy"><figcaption>TCP四次挥手</figcaption></figure><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h2><p><strong>什么是反射?</strong><br> 反射允许对成员变量，成员方法和构造方法的信息进行编程访问</p><figure><img src="'+Wn+`" alt="反射" tabindex="0" loading="lazy"><figcaption>反射</figcaption></figure><h3 id="获取-class-对象的三种方式" tabindex="-1"><a class="header-anchor" href="#获取-class-对象的三种方式"><span>获取 class 对象的三种方式</span></a></h3><ul><li><code>Class.forName(&quot;全类名&quot;)</code> // 最常用</li><li><code>类名.class</code> // 一般更多的是当做参数进行传递</li><li><code>对象.getclass()</code> // 当我们已经有这个类的对象时，才可以使用</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 第一种方式</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;reflect.myreflect1.Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第二种方式</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> class2 <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>class2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第三种方式</span>
<span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> class3 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>class3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取构造方法" tabindex="-1"><a class="header-anchor" href="#获取构造方法"><span>获取构造方法</span></a></h3><p>Class 类中用于获取构造方法的方法</p><ul><li><code>Constructor&lt;?&gt;[] getConstructors()</code>:返回所有公共构造方法对象的数组</li><li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code>:返回所有构造方法对象的数组</li><li><code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code>:返回单个公共构造方法对象</li><li><code>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;.. parameterTypes)</code>:返回单个构造方法对象</li></ul><p>Constructor 类中用于创建对象的方法</p><ul><li><code>Tnewlnstance(Object...initargs)</code>:根据指定的构造方法创建对象</li><li><code>setAccessible(boolean flag)</code>:设置为 true,表示取消访问检查</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;reflect.myreflect2.Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">:</span> constructors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">:</span> constructors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> declaredConstructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> declaredConstructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> modifiers <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Parameter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Parameter</span> parameter <span class="token operator">:</span> parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取成员变量" tabindex="-1"><a class="header-anchor" href="#获取成员变量"><span>获取成员变量</span></a></h3><p>Class 类中用于获取成员变量的方法</p><ul><li><code>Field[]getFields()</code>:返回所有公共成员变量对象的数组</li><li><code>Field[]getDeclaredFields()</code>:返回所有成员变量对象的数组</li><li><code>Field getField(Stringname)</code>:返回单个公共成员变量对象</li><li><code>Field getDeclaredField(String name)</code>:返回单个成员变量对象</li></ul><p>Field 类中用于创建对象的方法</p><ul><li><p><code>void set(Object obj,Object value)</code>: 赋值</p></li><li><p><code>Object get(Object obj)</code> 获取值。</p></li></ul><h3 id="获取成员方法" tabindex="-1"><a class="header-anchor" href="#获取成员方法"><span>获取成员方法</span></a></h3><p>Class 类中用于获取成员方法的方法</p><ul><li><code>Method[lgetMethods()</code>:返回所有公共成员方法对象的数组，包括继承的</li><li><code>Method[]getDeclaredMethods()</code>:返回所有成员方法对象的数组，不包括继承的</li><li><code>Method getMethod(String name, Class&lt;?&gt;.. parameterTypes)</code>:返回单个公共成员方法对象</li><li><code>Method getDeclaredMethod(String name, Class&lt;?&gt;.. parameterTypes)</code>:返回单个成员方法对象</li></ul><p>Method 类中用于创建对象的方法</p><ul><li><code>Object invoke(Object obj,Object... args)</code>:运行方法 <ul><li>参数一:用 obj 对象调用该方法</li><li>参数二:调用方法的传递的参数(如果没有就不写)</li><li>返回值:方法的返回值(如果没有就不写)</li></ul></li></ul><h3 id="反射的作用" tabindex="-1"><a class="header-anchor" href="#反射的作用"><span>反射的作用</span></a></h3><p>① 获取一个类里面所有的信息，获取到了之后，再执行其他的业务逻辑<br> ② 结合配置文件，动态的创建对象并调用方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;小A&quot;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">&quot;女&quot;</span><span class="token punctuation">,</span><span class="token number">167.5</span><span class="token punctuation">,</span><span class="token string">&quot;睡觉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Teacher</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">saveObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Class</span> clazz <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span><span class="token punctuation">{</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 成员变量的名字</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 成员变量的值</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 反射可以跟配置文件结合的方式，动态的创建对象，并调用方法</span>
<span class="token comment">// 读取配置文件</span>
<span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;day17-code\\\\src\\\\prop.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取全类名和方法名</span>
<span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;classname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> methodName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 利用反射创建对象并运行方法</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> con <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建对象</span>
<span class="token class-name">Object</span> o <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取指定的方法</span>
<span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>
method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><h3 id="概念、自定义注解" tabindex="-1"><a class="header-anchor" href="#概念、自定义注解"><span>概念、自定义注解</span></a></h3><ul><li>就是 Java 代码里的特殊标记，比如:@Override、@Test 等，作用是:让其他程序根据注解信息来决定怎么执行该程序。</li></ul><blockquote><p>自定义注解</p><ul><li>就是自己定义注解</li></ul><p>特殊属性名：value</p><ul><li>如果注解中只有一个 value 属性，使用注解时，value 名称可以不写！！</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> 注解名称<span class="token punctuation">{</span>
    <span class="token keyword">public</span> 属性类型 属性名<span class="token punctuation">(</span><span class="token punctuation">)</span> deafult 默认值<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyTest1</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">bbb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">ccc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyTest2</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@MyTest1</span><span class="token punctuation">(</span>aaa <span class="token operator">=</span> <span class="token string">&quot;111&quot;</span><span class="token punctuation">,</span> bbb <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> ccc <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;222&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// @MyTest2(value = &quot;333&quot;)</span>
<span class="token annotation punctuation">@MyTest2</span><span class="token punctuation">(</span><span class="token string">&quot;333&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationTest1</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@MyTest1</span><span class="token punctuation">(</span>aaa <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> bbb <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> ccc <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;HTML&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="注解的原理" tabindex="-1"><a class="header-anchor" href="#注解的原理"><span><strong>注解的原理</strong></span></a></h4><figure><img src="`+Vn+`" alt="注解的原理" tabindex="0" loading="lazy"><figcaption>注解的原理</figcaption></figure><ul><li>注解的本质是一个接口，Java 中所有注解都是继承了 Annotation 接口的</li><li>@注解（...）：其实就是一个实现类对象，实现了该注解以及 Annotation 接口</li></ul><h3 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解"><span>元注解</span></a></h3><ul><li>指的是:修饰注解的注解。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+Xn+'" alt="元注解" tabindex="0" loading="lazy"><figcaption>元注解</figcaption></figure><h3 id="注解的解析" tabindex="-1"><a class="header-anchor" href="#注解的解析"><span>注解的解析</span></a></h3><ul><li>就是判断类上、方法上、成员变量上是否存在注解，并把注解里的内容给解析出来</li></ul><blockquote><p>如何解析注解？</p><ul><li>指导思想:要解析谁上面的注解，就应该先拿到谁。</li><li>比如要解析类上面的注解，则应该先获取该类的 Class 对象，再通过 Class 对象解析其上面的注解</li><li>比如要解析成员方法上的注解，则应该获取到该成员方法的 Method 对象，再通过 Method 对象解析其上面的注解</li><li>Class、Method、Field,Constructor、都实现了 AnnotatedElement 接口，它们都拥有解析注解的能力。</li></ul><figure><img src="'+Qn+'" alt="注解的解析" tabindex="0" loading="lazy"><figcaption>注解的解析</figcaption></figure></blockquote><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><h2 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理"><span>动态代理</span></a></h2><p><strong>什么是动态代理</strong></p><p>代理可以无侵入式的给对象增强其他的功能</p><ul><li><code>调用者 --&gt;代理 ---&gt;对象</code></li></ul><p><strong>代理长什么样?</strong></p><p>代理里面就是对象要被代理的方法</p><p><strong>Java 通过什么来保证代理的样子?</strong></p><p>通过接口保证，后面的对象和代理需要实现同一个接口接口中就是被代理的所有方法</p><h3 id="创建代理对象" tabindex="-1"><a class="header-anchor" href="#创建代理对象"><span>创建代理对象</span></a></h3><figure><img src="'+Gn+'" alt="创建代理对象" tabindex="0" loading="lazy"><figcaption>创建代理对象</figcaption></figure>',539),ns=[$n];function ss(as,ts){return t(),a("div",null,ns)}const os=s(Yn,[["render",ss],["__file","Java进阶.html.vue"]]),ls=JSON.parse('{"path":"/category/Java/JavaSE/Java%E8%BF%9B%E9%98%B6.html","title":"Java 进阶","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-20T00:00:00.000Z","category":["后端"],"tag":["JAVASE 进阶"],"star":true,"description":"Java 进阶 面向对象高级 static 关键字 static 是静态的意思，可以修饰成员变量，也可以修饰成员方法 static 修饰成员的特点： 1、被类的所有对象所共享 2、多了一种调用方式，可以通过类目进行调用 3、随着类的加载而加载，优先于对象存在 static 成员变量 共享数据 static 成员方法 常用与工具类 1、成员方法什么时候加...","head":[["meta",{"property":"og:url","content":"https://studentdj.github.io/my-blob/category/Java/JavaSE/Java%E8%BF%9B%E9%98%B6.html"}],["meta",{"property":"og:site_name","content":"月岛"}],["meta",{"property":"og:title","content":"Java 进阶"}],["meta",{"property":"og:description","content":"Java 进阶 面向对象高级 static 关键字 static 是静态的意思，可以修饰成员变量，也可以修饰成员方法 static 修饰成员的特点： 1、被类的所有对象所共享 2、多了一种调用方式，可以通过类目进行调用 3、随着类的加载而加载，优先于对象存在 static 成员变量 共享数据 static 成员方法 常用与工具类 1、成员方法什么时候加..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-24T08:25:01.000Z"}],["meta",{"property":"article:author","content":"月岛"}],["meta",{"property":"article:tag","content":"JAVASE 进阶"}],["meta",{"property":"article:published_time","content":"2024-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-24T08:25:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 进阶\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-24T08:25:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"月岛\\",\\"url\\":\\"https://studentdj.github.io/my-blob/\\"}]}"]]},"headers":[{"level":2,"title":"面向对象高级","slug":"面向对象高级","link":"#面向对象高级","children":[{"level":3,"title":"static 关键字","slug":"static-关键字","link":"#static-关键字","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"final 关键字","slug":"final-关键字","link":"#final-关键字","children":[]},{"level":3,"title":"包","slug":"包","link":"#包","children":[]},{"level":3,"title":"抽象类","slug":"抽象类","link":"#抽象类","children":[]},{"level":3,"title":"接口","slug":"接口","link":"#接口","children":[]},{"level":3,"title":"多态","slug":"多态","link":"#多态","children":[]},{"level":3,"title":"接口新特性","slug":"接口新特性","link":"#接口新特性","children":[]},{"level":3,"title":"代码块","slug":"代码块","link":"#代码块","children":[]},{"level":3,"title":"内部类","slug":"内部类","link":"#内部类","children":[]},{"level":3,"title":"Lambda 表达式","slug":"lambda-表达式","link":"#lambda-表达式","children":[]},{"level":3,"title":"窗体、组件、事件","slug":"窗体、组件、事件","link":"#窗体、组件、事件","children":[]},{"level":3,"title":"适配器设计模式","slug":"适配器设计模式","link":"#适配器设计模式","children":[]},{"level":3,"title":"模版设计模式","slug":"模版设计模式","link":"#模版设计模式","children":[]}]},{"level":2,"title":"常用 API","slug":"常用-api","link":"#常用-api","children":[{"level":3,"title":"第一天","slug":"第一天","link":"#第一天","children":[]},{"level":3,"title":"第二天","slug":"第二天","link":"#第二天","children":[]},{"level":3,"title":"第三天","slug":"第三天","link":"#第三天","children":[]}]},{"level":2,"title":"递归、异常","slug":"递归、异常","link":"#递归、异常","children":[{"level":3,"title":"递归介绍和使用","slug":"递归介绍和使用","link":"#递归介绍和使用","children":[]},{"level":3,"title":"异常介绍","slug":"异常介绍","link":"#异常介绍","children":[]},{"level":3,"title":"异常处理方式","slug":"异常处理方式","link":"#异常处理方式","children":[]},{"level":3,"title":"自定义异常","slug":"自定义异常","link":"#自定义异常","children":[]}]},{"level":2,"title":"集合","slug":"集合","link":"#集合","children":[{"level":3,"title":"单列集合","slug":"单列集合","link":"#单列集合","children":[]},{"level":3,"title":"Collection 的使用","slug":"collection-的使用","link":"#collection-的使用","children":[]},{"level":3,"title":"集合的通用遍历方式","slug":"集合的通用遍历方式","link":"#集合的通用遍历方式","children":[]},{"level":3,"title":"List 接口","slug":"list-接口","link":"#list-接口","children":[]},{"level":3,"title":"ArrayList 类和 LinkList 类","slug":"arraylist-类和-linklist-类","link":"#arraylist-类和-linklist-类","children":[]},{"level":3,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":3,"title":"TreeSet 集合","slug":"treeset-集合","link":"#treeset-集合","children":[]},{"level":3,"title":"HashSet 集合类","slug":"hashset-集合类","link":"#hashset-集合类","children":[]},{"level":3,"title":"LinkedHashSet 集合类","slug":"linkedhashset-集合类","link":"#linkedhashset-集合类","children":[]},{"level":3,"title":"Collections 集合工具类","slug":"collections-集合工具类","link":"#collections-集合工具类","children":[]},{"level":3,"title":"Map 接口","slug":"map-接口","link":"#map-接口","children":[]},{"level":3,"title":"Map 集合的遍历方式","slug":"map-集合的遍历方式","link":"#map-集合的遍历方式","children":[]}]},{"level":2,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[]},{"level":2,"title":"Stream 流 File 类","slug":"stream-流-file-类","link":"#stream-流-file-类","children":[{"level":3,"title":"Stream 流","slug":"stream-流","link":"#stream-流","children":[]},{"level":3,"title":"File 类","slug":"file-类","link":"#file-类","children":[]}]},{"level":2,"title":"IO","slug":"io","link":"#io","children":[{"level":3,"title":"IO 流体系结构","slug":"io-流体系结构","link":"#io-流体系结构","children":[]},{"level":3,"title":"FileOutputStream 字节输出流","slug":"fileoutputstream-字节输出流","link":"#fileoutputstream-字节输出流","children":[]},{"level":3,"title":"FileInputStream 字节输入流","slug":"fileinputstream-字节输入流","link":"#fileinputstream-字节输入流","children":[]},{"level":3,"title":"字节缓冲流","slug":"字节缓冲流","link":"#字节缓冲流","children":[]},{"level":3,"title":"FileReader 字符输入流","slug":"filereader-字符输入流","link":"#filereader-字符输入流","children":[]},{"level":3,"title":"FileWriter 字符输出流","slug":"filewriter-字符输出流","link":"#filewriter-字符输出流","children":[]},{"level":3,"title":"字符缓冲流","slug":"字符缓冲流","link":"#字符缓冲流","children":[]},{"level":3,"title":"转换流","slug":"转换流","link":"#转换流","children":[]},{"level":3,"title":"序列化流","slug":"序列化流","link":"#序列化流","children":[]},{"level":3,"title":"打印流","slug":"打印流","link":"#打印流","children":[]},{"level":3,"title":"解压缩流/压缩流","slug":"解压缩流-压缩流","link":"#解压缩流-压缩流","children":[]},{"level":3,"title":"Commons-io","slug":"commons-io","link":"#commons-io","children":[]},{"level":3,"title":"HuTool","slug":"hutool","link":"#hutool","children":[]}]},{"level":2,"title":"properties 配制文件","slug":"properties-配制文件","link":"#properties-配制文件","children":[]},{"level":2,"title":"多线程&JUC","slug":"多线程-juc","link":"#多线程-juc","children":[{"level":3,"title":"进程和线程","slug":"进程和线程","link":"#进程和线程","children":[]},{"level":3,"title":"多线程的两个概念","slug":"多线程的两个概念","link":"#多线程的两个概念","children":[]},{"level":3,"title":"多线程的实现方式","slug":"多线程的实现方式","link":"#多线程的实现方式","children":[]},{"level":3,"title":"常见的成员方法","slug":"常见的成员方法","link":"#常见的成员方法","children":[]},{"level":3,"title":"线程的生命周期","slug":"线程的生命周期","link":"#线程的生命周期","children":[]},{"level":3,"title":"线程安全的问题","slug":"线程安全的问题","link":"#线程安全的问题","children":[]},{"level":3,"title":"Lock 锁","slug":"lock-锁","link":"#lock-锁","children":[]},{"level":3,"title":"死锁","slug":"死锁","link":"#死锁","children":[]},{"level":3,"title":"生产者和消费者（等待唤醒机制）","slug":"生产者和消费者-等待唤醒机制","link":"#生产者和消费者-等待唤醒机制","children":[]},{"level":3,"title":"线程池","slug":"线程池","link":"#线程池","children":[]}]},{"level":2,"title":"网络编程","slug":"网络编程","link":"#网络编程","children":[{"level":3,"title":"初识","slug":"初识","link":"#初识","children":[]},{"level":3,"title":"网络编程三要素","slug":"网络编程三要素","link":"#网络编程三要素","children":[]},{"level":3,"title":"UDP 通信程序","slug":"udp-通信程序","link":"#udp-通信程序","children":[]},{"level":3,"title":"TCP 通信程序","slug":"tcp-通信程序","link":"#tcp-通信程序","children":[]}]},{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[{"level":3,"title":"获取 class 对象的三种方式","slug":"获取-class-对象的三种方式","link":"#获取-class-对象的三种方式","children":[]},{"level":3,"title":"获取构造方法","slug":"获取构造方法","link":"#获取构造方法","children":[]},{"level":3,"title":"获取成员变量","slug":"获取成员变量","link":"#获取成员变量","children":[]},{"level":3,"title":"获取成员方法","slug":"获取成员方法","link":"#获取成员方法","children":[]},{"level":3,"title":"反射的作用","slug":"反射的作用","link":"#反射的作用","children":[]}]},{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[{"level":3,"title":"概念、自定义注解","slug":"概念、自定义注解","link":"#概念、自定义注解","children":[]},{"level":3,"title":"元注解","slug":"元注解","link":"#元注解","children":[]},{"level":3,"title":"注解的解析","slug":"注解的解析","link":"#注解的解析","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}]},{"level":2,"title":"动态代理","slug":"动态代理","link":"#动态代理","children":[{"level":3,"title":"创建代理对象","slug":"创建代理对象","link":"#创建代理对象","children":[]}]}],"git":{"createdTime":1716539101000,"updatedTime":1716539101000,"contributors":[{"name":"DJ","email":"2412205377@qq.com","commits":1}]},"readingTime":{"minutes":58.38,"words":17514},"filePathRelative":"category/Java/JavaSE/Java进阶.md","localizedDate":"2024年3月20日","excerpt":"\\n<h2>面向对象高级</h2>\\n<h3>static 关键字</h3>\\n<blockquote>\\n<p>static 是静态的意思，可以修饰成员变量，也可以修饰成员方法</p>\\n</blockquote>\\n<p><strong>static 修饰成员的特点：</strong></p>\\n<ul>\\n<li>1、被类的所有对象所共享</li>\\n<li>2、多了一种调用方式，可以通过类目进行调用</li>\\n<li>3、随着类的加载而加载，优先于对象存在</li>\\n</ul>\\n<p><strong>static 成员变量</strong></p>\\n<ul>\\n<li>共享数据</li>\\n</ul>\\n<p><strong>static 成员方法</strong></p>","autoDesc":true}');export{os as comp,ls as data};
